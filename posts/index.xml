<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on pieterjd.be</title><link>https://www.pieterjd.be/posts/</link><description>Recent content in Posts on pieterjd.be</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Jun 2022 20:17:40 +0000</lastBuildDate><atom:link href="https://www.pieterjd.be/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Proper JMS conversion to POJOs</title><link>https://www.pieterjd.be/posts/jms-property-name-must-not-be-null/</link><pubDate>Tue, 14 Jun 2022 20:17:40 +0000</pubDate><guid>https://www.pieterjd.be/posts/jms-property-name-must-not-be-null/</guid><description>While looking into Azure Service bus with Spring Boot, I stumbled upon a nasty stacktrace caused by an IllegalArgumentException:
java.lang.IllegalArgumentException: Property name must not be null So what is going on here?
Setup I configured a queue persons on Azure service bus and in my spring boot application I defined a QueueListener using the @JmsListener annotation
@Component public class PersonQueueListener { private static final String QUEUENAME=&amp;#34;persons&amp;#34;; @JmsListener(destination = QUEUENAME) public void receiveMessage(Person person) throws JsonProcessingException { log.</description><content type="html"><![CDATA[<p>While looking into Azure Service bus with Spring Boot, I stumbled upon a nasty stacktrace caused by an IllegalArgumentException:</p>
<pre><code>java.lang.IllegalArgumentException: Property name must not be null
</code></pre><p>So what is going on here?</p>
<h2 id="setup">Setup</h2>
<p>I configured a queue <code>persons</code> on Azure service bus and in my spring boot application I defined a QueueListener using the <code>@JmsListener</code> annotation</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonQueueListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">QUEUENAME</span><span class="o">=</span><span class="s">&#34;persons&#34;</span><span class="o">;</span>

    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="n">QUEUENAME</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">receiveMessage</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">JsonProcessingException</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Received Person {} on Service Bus&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Somehow I expected this to work - after all the <code>Person</code> class was filled with Jackson annotations. However, exceptions were flying around with the only clue <code>Property name must not be null</code>.</p>
<h2 id="root-cause">Root cause</h2>
<pre><code>org.springframework.jms.listener.adapter.ListenerExecutionFailedException: Listener method 'public void com.example.demo.PersonQueueListener.receiveMessage(com.example.demo.Person) throws com.fasterxml.jackson.core.JsonProcessingException' threw exception; nested exception is java.lang.IllegalArgumentException: Property name must not be null
	at org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:122) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:77) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:736) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:696) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:674) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:331) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:270) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1237) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1227) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1120) ~[spring-jms-5.3.20.jar:5.3.20]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
Caused by: java.lang.IllegalArgumentException: Property name must not be null
	at org.apache.qpid.jms.message.JmsMessagePropertySupport.checkPropertyNameIsValid(JmsMessagePropertySupport.java:57) ~[qpid-jms-client-0.53.0.jar:na]
	at org.apache.qpid.jms.message.JmsMessagePropertyIntercepter.getProperty(JmsMessagePropertyIntercepter.java:692) ~[qpid-jms-client-0.53.0.jar:na]
	at org.apache.qpid.jms.message.JmsMessage.getObjectProperty(JmsMessage.java:353) ~[qpid-jms-client-0.53.0.jar:na]
	at org.apache.qpid.jms.message.JmsMessage.getStringProperty(JmsMessage.java:393) ~[qpid-jms-client-0.53.0.jar:na]
	at org.springframework.jms.support.converter.MappingJackson2MessageConverter.getJavaTypeForMessage(MappingJackson2MessageConverter.java:453) ~[spring-jms-5.3.20.jar:5.3.20]
	at org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(MappingJackson2MessageConverter.java:233) ~[spring-jms-5.3.20.jar:5.3.20]

</code></pre><p>Let&rsquo;s take a side-step. When deserialising a JSON string with objectMapper, you explicitly provide the type to deserialise to. For instance:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">json</span><span class="o">=</span><span class="s">&#34;&#34;&#34;
</span><span class="s">{
</span><span class="s">  &#34;</span><span class="n">firstName</span><span class="s">&#34;: &#34;</span><span class="n">Byram</span><span class="s">&#34;,
</span><span class="s">  &#34;</span><span class="n">lastName</span><span class="s">&#34;: &#34;</span><span class="n">Aguirrezabal</span><span class="s">&#34;
</span><span class="s">}
</span><span class="s">&#34;&#34;&#34;</span><span class="o">;</span>
<span class="c1">//creating a Person object from the json String
</span><span class="c1"></span><span class="n">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div><p>Now when receiving some text from a message queue, you don&rsquo;t know what the type is: is it a <code>Person</code>,  <code>List</code>,  <code>LocalDateTime</code>, &hellip; and that is exactly what <code>MappingJackson2MessageConverter.getJavaTypeForMessage</code> is trying to figure out. According to the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html#getJavaTypeForMessage-javax.jms.Message-">Javadocs</a>:</p>
<blockquote>
<p>Determine a Jackson JavaType for the given JMS Message, typically parsing a type id message property.</p>
</blockquote>
<h2 id="solution">Solution</h2>
<p>So you need to add a property to your JMS message stating &lsquo;this message represents a Person, List, &hellip;.&rsquo;, and you need to tell the <code>MappingJackson2MessageConverter</code> what the name of this property is with the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html#setTypeIdPropertyName-java.lang.String-"><code>setTypeIdPropertyName</code> method</a> - I lik the note in bold, that is hardly mentioned in any other documentation :)</p>
<blockquote>
<p>Specify the name of the JMS message property that carries the type id for the contained object: either a mapped id value or a raw Java class name.</p>
<p>Default is none. <strong>NOTE: This property needs to be set in order to allow for converting from an incoming message to a Java object.</strong></p>
</blockquote>
<p>Now we are ready to define a custom bean:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"> <span class="nd">@Bean</span>
<span class="kd">public</span> <span class="n">MessageConverter</span> <span class="nf">jsonJmsConverter</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">MappingJackson2MessageConverter</span> <span class="n">jackson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MappingJackson2MessageConverter</span><span class="o">();</span>
  <span class="c1">//json is just text
</span><span class="c1"></span>  <span class="n">jackson</span><span class="o">.</span><span class="na">setTargetType</span><span class="o">(</span><span class="n">MessageType</span><span class="o">.</span><span class="na">TEXT</span><span class="o">);</span>
  <span class="c1">//each message should contain a property called _type and its value is the name of the class to serialize to
</span><span class="c1"></span>  <span class="n">jackson</span><span class="o">.</span><span class="na">setTypeIdPropertyName</span><span class="o">(</span><span class="s">&#34;_type&#34;</span><span class="o">);</span>
  <span class="k">return</span> <span class="n">jackson</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>Allright, let&rsquo;s test this out. Head over to the Azure portal, select your Service Bus instance and open the Service Bus Explorer (still in preview at the time of writing). In the explorer, you can send messages and put them on the bus.</p>
<p><img src="./service-bus-explorer.png" alt="Service Bus Explorer">
Things to note:</p>
<ol>
<li>the message body should contain valid JSON</li>
<li>set the content type to <code>application/json</code></li>
<li>add a custom property so the converter can find out what class to deserialize to.</li>
</ol>
<p>Restarting the Spring Boot app, and on the logs I now see this nice message without any stack traces.</p>
<pre><code>2022-06-15 20:17:30.749  INFO 50892 --- [ntContainer#0-1] com.example.demo.PersonQueueListener     : Received Person com.example.demo.Person@7f445293 on Service Bus
</code></pre>]]></content></item><item><title>Reduce docker ps Output Clutter with AWK</title><link>https://www.pieterjd.be/posts/reduce-docker-ps-clutter-with-awk/</link><pubDate>Thu, 08 Jul 2021 10:45:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/reduce-docker-ps-clutter-with-awk/</guid><description>I&amp;rsquo;m a fan of docker, especially with my brand new macbook - spinning up loads of containers is always fun 😀. However when listing the containers, things get a bit unclear. Check the following output:
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d52c11b67cfe docker.elastic.co/elasticsearch/elasticsearch:7.13.2 &amp;quot;/bin/tini -- /usr/l…&amp;quot; 2 hours ago Up 2 hours 0.0.0.0:9200-&amp;gt;9200/tcp, :::9200-&amp;gt;9200/tcp, 0.0.0.0:9300-&amp;gt;9300/tcp, :::9300-&amp;gt;9300/tcp vb-bo_elasticsearch_1 76fee05889f0 logstash:7.13.2 &amp;quot;/usr/local/bin/dock…&amp;quot; 2 hours ago Up 50 minutes 0.0.0.0:5044-&amp;gt;5044/tcp, :::5044-&amp;gt;5044/tcp, 0.</description><content type="html"><![CDATA[<p>I&rsquo;m a fan of docker, especially with my brand new macbook - spinning up loads of containers is always fun 😀. However when listing the containers, things get a bit unclear. Check the following output:</p>
<pre><code>CONTAINER ID   IMAGE                                                  COMMAND                  CREATED       STATUS             
    PORTS                                                                                  NAMES
d52c11b67cfe   docker.elastic.co/elasticsearch/elasticsearch:7.13.2   &quot;/bin/tini -- /usr/l…&quot;   2 hours ago   Up 2 hours         
  0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp, :::9300-&gt;9300/tcp   vb-bo_elasticsearch_1
76fee05889f0   logstash:7.13.2                                        &quot;/usr/local/bin/dock…&quot;   2 hours ago   Up 50 minutes       
  0.0.0.0:5044-&gt;5044/tcp, :::5044-&gt;5044/tcp, 0.0.0.0:9600-&gt;9600/tcp, :::9600-&gt;9600/tcp   vb-bo_logstash_1
e18d279ed438   mysql/mysql-server:latest                              &quot;/entrypoint.sh mysq…&quot;   2 hours ago   Up 2 hours (healthy)
  0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060-33061/tcp                             vb-bo_mysql_1
</code></pre><p>See what I mean? Columnnames floating to the next line, a lot of white space making it not so readable.</p>
<p>Recently I got more invested with AWK, and wanted to give this a try and I came up with this little gem.</p>
<div class="highlight"><pre class="chroma"><code class="language-awk" data-lang="awk"><span class="p">{</span><span class="kr">print</span> <span class="o">$</span><span class="mi">2</span><span class="p">,</span> <span class="o">$</span><span class="mi">5</span><span class="p">}</span> 
<span class="nb">END</span><span class="p">{</span>
 <span class="kr">print</span> <span class="s2">&#34;\n&#34;</span><span class="p">,</span><span class="nb">NR</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;up and running&#34;</span>
<span class="p">}</span>
</code></pre></div><p>This actually means: print the second and fifth column (Mind you: this is not zero-index based). Also you need a special delimiter, so tying everthing together you get:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker ps <span class="p">|</span> awk -F <span class="s1">&#39;(   )+&#39;</span> <span class="s1">&#39;{print $2, $5} END{print &#34;\n&#34;,NR-1, &#34;up and running&#34;}&#39;</span>
</code></pre></div><p>Now you get this cleaner output with the final line being the summary of the number of running containers</p>
<pre><code>IMAGE  STATUS
docker.elastic.co/elasticsearch/elasticsearch:7.13.2 Up 2 hours
logstash:7.13.2 Up 58 minutes
mysql/mysql-server:latest Up 2 hours (healthy)

 3 up and running
</code></pre><p>Of course, if you don&rsquo;t want to dip your toe in AWK, <code>docker ps</code> now also supports the <a href="https://docs.docker.com/engine/reference/commandline/ps/#formatting"><code>--format</code></a> switch.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker ps --format <span class="s2">&#34;table {{.Names}} {{.Status}}&#34;</span>
</code></pre></div>]]></content></item><item><title>Summarize Latest Changes In Your Codebase</title><link>https://www.pieterjd.be/posts/summarize-latest-changes-in-your-codebase/</link><pubDate>Sun, 27 Jun 2021 12:33:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/summarize-latest-changes-in-your-codebase/</guid><description>You are probably familiar with this workflow
work on different stories pull requests are approved and merged deploy changes inform the team For the last part, you check your todo list to get a nice description instead of some mysterious ID. You could do this manually, but this is very time-consuming, not to mention mind-numbing. Scripts to the rescue!
High level approach Fetch the version information of the environment you want to deploy to.</description><content type="html"><![CDATA[<p>You are probably familiar with this workflow</p>
<ol>
<li>work on different stories</li>
<li>pull requests are approved and merged</li>
<li>deploy changes</li>
<li>inform the team</li>
</ol>
<p>For the last part, you check your todo list to get a nice description instead of some mysterious ID. You could do this manually, but this is very time-consuming, not to mention mind-numbing. Scripts to the rescue!</p>
<h2 id="high-level-approach">High level approach</h2>
<ol>
<li>
<p>Fetch the version information of the environment you want to deploy to. If not yet available, I suggest you create a version endpoint and include the commit id of the lastest commit. If you work with the Java/Maven combo, then just include the <a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">Git Commit ID Maven Plugin</a></p>
</li>
<li>
<p>Get all information from all commits starting from the commit id, retrieved from the version id up till the last one. Assuming you use git (and you should!) then you can use the following command</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"> git log &lt;commitIdFromVersionEndpoint&gt;..HEAD --format<span class="o">=</span>format:<span class="s2">&#34;%s&#34;</span>
</code></pre></div></li>
<li>
<p>Do some regex magic to extract the story id, task id, &hellip;.</p>
</li>
<li>
<p>Connect to your backlog (REST, commandline, &hellip;.) to retrieve the information of the story id</p>
</li>
<li>
<p>print on the console and copy to clipboard</p>
</li>
</ol>
<h2 id="example-script">Example script</h2>
<p>As I am a fan of powershell, this was my go to language to implement this workflow.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="c"># --- helper functions ---</span>
<span class="c"># get all commit messages starting from the given hash</span>
<span class="k">function</span> <span class="nb">get-commits</span><span class="p">(</span><span class="nv">$fromHash</span><span class="p">){</span>
  <span class="nv">$commits</span> <span class="p">=</span> <span class="p">&amp;</span> <span class="s2">&#34;git&#34;</span> <span class="p">@(</span><span class="s2">&#34;log&#34;</span><span class="p">,</span><span class="s2">&#34;$fromHash..HEAD&#34;</span><span class="p">,</span> <span class="s2">&#34;--format=format:&#34;&#34;%s&#34;&#34;&#34;</span><span class="p">)</span>
  <span class="k">return</span> <span class="nv">$commits</span>
<span class="p">}</span>

<span class="c"># $ticketId: the Jira ticket id</span>
<span class="c"># $prefix: prefix for the message that will be returned - empty by default</span>
<span class="k">function</span> <span class="nb">get-description</span><span class="p">(</span><span class="nv">$ticketId</span><span class="p">,</span><span class="nv">$prefix</span><span class="p">=</span><span class="s1">&#39;&#39;</span><span class="p">){</span>
<span class="nv">$url</span> <span class="p">=</span> <span class="s2">&#34;https://&lt;replace with jira url&gt;/rest/api/2/search?jql=issue={0}&amp;fields=summary,parent&#34;</span> <span class="o">-f</span> <span class="nv">$ticketId</span>
<span class="nv">$response</span> <span class="p">=</span> <span class="p">(</span><span class="nb">curl </span><span class="n">-u</span> <span class="p">&lt;</span><span class="n">your</span> <span class="n">credential</span><span class="p">&gt;</span> <span class="nv">$url</span> <span class="n">-s</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ConvertFrom-json</span>

<span class="nv">$summary</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">issues</span><span class="p">.</span><span class="n">fields</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">summary</span>
<span class="k">return</span> <span class="s2">&#34;{0}{1} - {2}&#34;</span> <span class="o">-f</span> <span class="nv">$prefix</span><span class="p">,</span><span class="nv">$ticketId</span><span class="p">,</span><span class="nv">$summary</span>
<span class="p">}</span>

<span class="c"># Step 1: get version endpoint and get the hash of the latest deployed commit</span>
<span class="nv">$shortCommitId</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Invoke-RestMethod</span> <span class="n">https</span><span class="err">:</span><span class="p">//&lt;</span><span class="n">replace</span> <span class="n">with</span> <span class="n">your</span> <span class="n">own</span> <span class="n">endpoint</span><span class="p">&gt;/</span><span class="n">version</span><span class="p">).</span><span class="n">gitHash</span>

<span class="c"># Step 2: pull in latest changes and get all commit messages</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="n">develop</span>
<span class="n">git</span> <span class="n">pull</span>
<span class="nv">$commits</span> <span class="p">=</span> <span class="nb">get-commits</span><span class="p">(</span><span class="nv">$shortCommitId</span><span class="p">)</span>

<span class="c"># step 3: keep commit messages containing qntc, the Jira project key</span>
<span class="nv">$commits</span> <span class="p">=</span> <span class="nv">$commits</span> <span class="p">|?{</span><span class="nv">$_</span> <span class="o">-like</span> <span class="s1">&#39;*qntc*&#39;</span><span class="p">}</span>
<span class="c"># start building the message as an array of strings</span>
<span class="nv">$msg</span> <span class="p">=</span> <span class="p">@(</span><span class="s2">&#34;Starting deploy to int. Deploy includes: &#34;</span><span class="p">)</span>
<span class="c"># Step 4: retrieve the story description</span>
<span class="c"># typical powershell one-liner:</span>
<span class="c"># - Loop over all commits and check for QNTC prefix</span>
<span class="c"># - Sort the found prefixes</span>
<span class="c"># - Select the unique values</span>
<span class="c"># - Fetch the story description for each unique value</span>
<span class="c"># the array of the unique story description is prefixed with &#39;* &#39;, and are then appended to the $msg array</span>
<span class="nv">$msg</span> <span class="p">+=</span> <span class="p">(</span><span class="nv">$commits</span> <span class="p">|%{</span><span class="k">if</span><span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;QNTC[SUP]*-\d+&#39;</span><span class="p">)</span> <span class="p">{</span><span class="nv">$Matches</span><span class="p">[</span><span class="n">0</span><span class="p">]}}</span> <span class="p">|</span> <span class="n">sort</span><span class="p">|</span> <span class="nb">select </span><span class="n">-unique</span> <span class="p">|</span> <span class="p">%{</span><span class="nb">get-description</span> <span class="nv">$_</span> <span class="s1">&#39;* &#39;</span><span class="p">})</span>
<span class="c"># copy the message to the clipboard</span>
<span class="nv">$msg</span> <span class="p">|</span> <span class="n">pbcopy</span>
<span class="nb">Write-Host</span> <span class="s1">&#39;copied to clipboard&#39;</span>

</code></pre></div><p>That&rsquo;s it! I&rsquo;m sure you can implement this in your favourite scripting language</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">Maven Git Commit ID Plugin</a></li>
<li><a href="https://git-scm.com/docs/git-log">Git Log command</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/introduction-to-powershell/">Introduction to Powershell</a> - <a href="https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-string-substitutions?view=powershell-7.1">Everything you wanted to know about variable substitution in strings in Powershell</a></li>
<li><a href="https://www.atlassian.com/blog/jira-software/jql-the-most-flexible-way-to-search-jira-14">Getting started with JQL</a> - <a href="https://support.atlassian.com/jira-service-management-cloud/docs/use-advanced-search-with-jira-query-language-jql/">Advanced Search with JQL</a></li>
</ul>
]]></content></item><item><title>Templating as Automation</title><link>https://www.pieterjd.be/posts/templating/</link><pubDate>Sat, 17 Apr 2021 19:33:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/templating/</guid><description>In this post, I&amp;rsquo;ll cover different examples of what I like to call templating. Doing the same over and over again, but only few parts change each iteration.
Environment Variables While working on integrating an API, I had to authenticate with a Bearer token in the authentication header. These tokens are typically short-lived, so they change multiple times a day.
As part of the integration, I write down the API calls in Typora, a very nice markdown editor.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll cover different examples of what I like to call <em>templating</em>. Doing the same over and over again, but only few parts change each iteration.</p>
<h2 id="environment-variables">Environment Variables</h2>
<p>While working on integrating an API, I had to authenticate with a Bearer token in the authentication header. These tokens are typically short-lived, so they change multiple times a day.</p>
<p>As part of the integration, I write down the API calls in <code>Typora</code>, a very nice markdown editor. I really like I can add code snippets that are being highlighted, it&rsquo;s easy to work with, so it&rsquo;s an ideal tool for taking notes that I can later refer to. A typical entry would be like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">http <span class="s1">&#39;Authentication: Bearer 123456789...XYZ&#39;</span> http: //www.example.com
</code></pre></div><p>A typical workflow is copying the call from my markdown notes and execute them in the shell. Off course the bearer token has expired in the meantime, so I have to request a new token, update my notes and copy again.</p>
<p>And then it hit me: why not replace the bearer token in my notes with environment variables? That way I can just copy and paste the command, and if the token is expired, I can just update it without changing my notes.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">TOKEN</span><span class="o">=</span>123456789...XYZ <span class="c1"># update the bearer token if expired</span>
http <span class="s2">&#34;Authentication: Bearer </span><span class="nv">$TOKEN</span><span class="s2">&#34;</span> http://www.example.com
</code></pre></div><h2 id="sql-statement-generation">SQL statement generation</h2>
<p>Currently working on a new Java application with typical user roles.</p>
<p>For developing and testing purposes it is useful to have a dedicated user for each role. In this particular case this requires a row to be added to the <code>user</code> and <code>user_roles</code> tables. Not that hard, but there are 5 roles, for each role 2 queries meaning a total of 10 queries that differ on only a few places, being the <code>email</code> address and the <code>credential</code> value.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">sql</span> <span class="k">insert</span> <span class="k">into</span> <span class="o">`</span><span class="k">user</span><span class="o">`</span> <span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">is_active</span><span class="p">,</span> <span class="n">created_at</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;admin@example.com&#39;</span><span class="p">,</span> <span class="n">sha1</span><span class="p">(</span><span class="s1">&#39;pass&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">now</span><span class="p">(),</span> <span class="n">now</span><span class="p">()</span> <span class="p">);</span>

<span class="k">insert</span> <span class="k">into</span> <span class="n">user_credential</span> <span class="p">(</span><span class="n">user_id</span><span class="p">,</span><span class="n">credential</span><span class="p">,</span><span class="n">value</span><span class="p">,</span><span class="n">created_at</span><span class="p">,</span><span class="n">updated_at</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="n">LAST_INSERT_ID</span><span class="p">(),</span><span class="s1">&#39;admin&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">now</span><span class="p">(),</span><span class="n">now</span><span class="p">());</span>
</code></pre></div><p>So it is Powershell to the rescue, more specific the templating functionality.</p>
<p>In powershell you can define placeholders between curly brackets around an index (zero-based). Next you can format the template while providing the values for each placeholder - the <code>-f</code> is shorthand for <code>format</code> and then you provide all values separated by commas. This <code>$_</code> is a special variable in powershell, it is the currently processed value of the array. In the first iteration, it will have the value <code>admin</code>, the next iteration the value <code>press</code>, and so on.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nv">$sql_template</span> <span class="p">=</span> <span class="sh">@&#34;
</span><span class="sh">insert into `user`
</span><span class="sh">(email, password, is_active, created_at, updated_at)
</span><span class="sh">values(&#39;{0}@example.com&#39;, sha1(&#39;pass&#39;), 1, now(), now() );
</span><span class="sh">
</span><span class="sh">insert into user_credential
</span><span class="sh">(user_id,credential,value,created_at,updated_at)
</span><span class="sh">values (LAST_INSERT_ID(),&#39;{0}&#39;,1,now(),now());
</span><span class="sh">&#34;@</span>

<span class="c"># loop over roles array and provide each one of them to the template.</span>
<span class="p">@(</span><span class="s1">&#39;admin&#39;</span><span class="p">,</span><span class="s1">&#39;press&#39;</span><span class="p">,</span><span class="s1">&#39;super-admin&#39;</span><span class="p">,</span><span class="s1">&#39;mice&#39;</span><span class="p">,</span><span class="s1">&#39;spot&#39;</span><span class="p">)</span>
  <span class="p">|%{</span><span class="nv">$sql_template</span> <span class="o">-f</span> <span class="nv">$_</span><span class="p">}</span>
</code></pre></div><p>Of course this does not work on all environments because the list of user roles is different for each environment. So you can rewrite this Powershell template with an actual SQL statement, using the <code>CONCAT</code>function. It does not look pretty, but it gets the job done.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="k">distinct</span> <span class="n">uc</span><span class="p">.</span><span class="n">credential</span> <span class="k">as</span> <span class="k">c</span><span class="p">,</span>
<span class="n">CONCAT</span><span class="p">(</span><span class="s2">&#34;insert into `user` ( email, password,
</span><span class="s2">is_active, created_at, updated_at)
</span><span class="s2">values(&#39;&#34;</span><span class="p">,</span>  <span class="n">credential</span><span class="p">,</span> <span class="s2">&#34;@emakina.com&#39;, sha1(&#39;pass&#39;),
</span><span class="s2">1, now(), now());&#34;</span><span class="p">)</span>
<span class="k">as</span> <span class="n">command</span>
<span class="k">from</span> <span class="n">user_credential</span> <span class="n">uc</span>
<span class="k">UNION</span>
<span class="k">SELECT</span> <span class="k">distinct</span> <span class="n">uc</span><span class="p">.</span><span class="n">credential</span> <span class="k">as</span> <span class="k">c</span><span class="p">,</span>
<span class="n">CONCAT</span><span class="p">(</span><span class="s2">&#34;insert into user_credential (user_id, credential,
</span><span class="s2">value, created_at, updated_at)
</span><span class="s2">values (LAST_INSERT_ID(), &#39;&#34;</span><span class="p">,</span>  <span class="n">credential</span><span class="p">,</span><span class="s2">&#34;&#39;, 1, now(), now());&#34;</span><span class="p">)</span>
<span class="k">as</span> <span class="n">command</span>
<span class="k">from</span> <span class="n">user_credential</span> <span class="n">uc</span>
<span class="k">order</span> <span class="k">by</span> <span class="k">c</span><span class="p">;</span>
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Templating can help a lot with reducing annoying tasks. Powershell (or any language/tool that supports some kind of templating) is a great help, if not available, CONCAT functions go a long way as well</p>
<h2 id="references">References</h2>
<ul>
<li>Environment variables: <a href="https://www.shell-tips.com/bash/environment-variables/">Bash (Linux / Mac)</a> - <a href="https://ss64.com/nt/syntax-variables.html">DOS / Windows</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/introduction-to-powershell/">Introduction to Powershell</a> - <a href="https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-string-substitutions?view=powershell-7.1">Everything you wanted to know about variable substitution in strings in Powershell</a>
<ul>
<li>Download Powershell: <a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-macos?view=powershell-7.1">Mac</a> <a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7.1">Windows</a> <a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-7.1">Linux</a></li>
</ul>
</li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat">(My)SQL Concat</a> - <a href="https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat">(My)SQL Group Concat</a></li>
</ul>
]]></content></item><item><title>Simple Jackson Deserializer</title><link>https://www.pieterjd.be/posts/simple-jackson-deserializer/</link><pubDate>Wed, 17 Mar 2021 19:51:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/simple-jackson-deserializer/</guid><description>As I was working on some random data with a ZonedDateTime, it turned out Jackson was unable to deserialize it. How come?
Why not use Jackson datetime module? The codebase I was working on, did not support the Jackson datetime module. It was also not possible to add this module as all Jackson related code was provided and the vendor stressed very clearly &amp;lsquo;not to mess things up with other versions&amp;rsquo;.</description><content type="html"><![CDATA[<p>As I was working on some random data with a ZonedDateTime, it turned out Jackson was unable to deserialize it. How come?</p>
<h2 id="why-not-use-jackson-datetime-module">Why not use Jackson datetime module?</h2>
<p>The codebase I was working on, did not support the Jackson datetime module. It was also not possible to add this module as all Jackson related code was provided and the vendor stressed very clearly &lsquo;not to mess things up with other versions&rsquo;.</p>
<h2 id="writing-the-deserializer">Writing the Deserializer</h2>
<p>So I wrote a simple deserializer. It was actually quite easy: datetime&rsquo;s wer in the following format: <code>2020-05-09T23:24:13Z</code></p>
<p>Luckily the ZonedDateTime offers a <a href="https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html#parse-java.lang.CharSequence-">static parse method</a>.</p>
<p>So it all comes down to this simple class:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.JsonParser</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.JsonProcessingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.DeserializationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.deser.std.StdDeserializer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZonedDateTime</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ZonedDateTimeDeserializer</span> <span class="kd">extends</span> <span class="n">StdDeserializer</span><span class="o">&lt;</span><span class="n">ZonedDateTime</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ZonedDateTimeDeserializer</span><span class="o">(){</span>
        <span class="k">this</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">protected</span> <span class="nf">ZonedDateTimeDeserializer</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">vc</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">vc</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ZonedDateTime</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jsonParser</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">deserializationContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">jsonParser</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="using-the-deserializer">Using the Deserializer</h2>
<p>The field I want to deserialize into, needs an additional annotation:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@JsonDeserialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="n">ZonedDateTimeDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">private</span> <span class="n">ZonedDateTime</span> <span class="n">date</span><span class="o">;</span>
</code></pre></div><p>That&rsquo;s it! In summary:</p>
<ul>
<li>Write a custom deserializer</li>
<li>Use it with the <code>@JsonDeserialize</code> annotation</li>
</ul>
]]></content></item><item><title>Automate AEM development</title><link>https://www.pieterjd.be/posts/automate-aem-development/</link><pubDate>Mon, 08 Feb 2021 19:31:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/automate-aem-development/</guid><description>When working with AEM, you&amp;rsquo;re confronted with tedious work - writing components with dialogs defined in XML, lots of boiler-plating. Ideal for automation!
Enter your favorite code generator Yeoman, &amp;ldquo;the Web&amp;rsquo;s Scaffolding ToolFor Modern Webapps&amp;rdquo; is great for this purpose. I came to know this when working on some JHipster project.
It&amp;rsquo;s very easy to define generator (eg. generate an AEM component) using templates (renderscript, dialog, &amp;hellip;.)
I&amp;rsquo;ve put things together in the AEM Generator Repo.</description><content type="html"><![CDATA[<p>When working with AEM, you&rsquo;re confronted with tedious work - writing components with dialogs defined in XML, lots of boiler-plating. Ideal for automation!</p>
<h2 id="enter-your-favorite-code-generator">Enter your favorite code generator</h2>
<p><a href="https://yeoman.io/">Yeoman</a>, &ldquo;the Web&rsquo;s Scaffolding ToolFor Modern Webapps&rdquo; is great for this purpose. I came to know this when working on some <a href="https://jhisper.tech">JHipster</a> project.</p>
<p>It&rsquo;s very easy to define generator (eg. generate an AEM component) using templates (renderscript, dialog, &hellip;.)</p>
<p>I&rsquo;ve put things together in the <a href="https://github.com/pieterjd/aem-generator">AEM Generator Repo</a>. So far, it contains generators for</p>
<ul>
<li>AEM component</li>
<li>AEM Client Library</li>
<li>Log Configuration</li>
<li>AEM Page with <strong>Ipsum Lorem</strong> content</li>
</ul>
<p>Check out the repository for instruction on how to install and run the generators.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://yeoman.io">Yeoman</a> - <a href="https://yeoman.io/authoring/">Creating a generator</a></li>
</ul>
]]></content></item><item><title>Minified Javascript in AEM Clientlibs breaks the build</title><link>https://www.pieterjd.be/posts/minified-javascript-in-aem-clientlib/</link><pubDate>Sat, 30 Jan 2021 21:25:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/minified-javascript-in-aem-clientlib/</guid><description>Recently we had to integrate third-party minified javascript and css in an AEM client library. Unfortunatly this broke the build on Adobe Cloud. How did we solve this?
What&amp;rsquo;s the problem? Minification! From our client, we received already minified javascript and styling we needed to integrate in the AEM website. Nothing too difficult, but the build on AEM Cloud finished with errors. On top of that, we could not download the logs, so we really were in the dark here.</description><content type="html"><![CDATA[<p>Recently we had to integrate third-party minified javascript and css in an AEM client library. Unfortunatly this broke the build on Adobe Cloud. How did we solve this?</p>
<h2 id="whats-the-problem-minification">What&rsquo;s the problem? Minification!</h2>
<p>From our client, we received already minified javascript and styling we needed to integrate in the AEM website. Nothing too difficult, but the build on AEM Cloud finished with errors. On top of that, we could not download the logs, so we really were in the dark here.</p>
<p>After a lot of trial and error, we were able to find the commit causing the issue (we had pushed a lot of new features). It was the commit containing the minified javascript.</p>
<p>By default, AEM minifies all the client libraries. Usually, the client libraries consists of non-optimized javascript (ie. no minification nor linting) - so no issue there.</p>
<p>However, minification of already minified client libraries is not that straightforward and is apparently a build breaker 😲.</p>
<h2 id="whats-the-solution-clientlib-preprocessor">What&rsquo;s the solution? Clientlib Preprocessor!</h2>
<p>After a day or two, I remembered I worked on Client library <a href="https://experienceleague.adobe.com/docs/experience-manager-64/developing/introduction/clientlibs.html?lang=en#using-preprocessors">preprocessing</a> at a previous project. For each client library you can define what preprocessor to use for minification. One of the valid values is <code>none</code>, so no minification. After configuring the clientlib to not minify it, the build was again successful.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you need to integrate minified javascript in your AEM client library, turn off the minification using the preprocessor configuration</p>
]]></content></item><item><title>Automate Angular Material Workflow using Schematics</title><link>https://www.pieterjd.be/posts/automate-angular-material-workflow-with-schematics/</link><pubDate>Sat, 02 Jan 2021 12:22:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/automate-angular-material-workflow-with-schematics/</guid><description>What is this post about? I&amp;rsquo;m a huge fan of the SpringBoot backend - Angular frontend combination. And since my UX/UI skills are very limited, I really enjoy working with angular material, a really nice library of common widgets implemented as Angular components using the material design.
I found myself doing the same thing over and over again:
generate a table component, using the material table schematic create a service with Angular CLI connecting to a SpringBoot backend to retrieve objects, using the typical CRUD methods (getAll, save, delete, &amp;hellip;) create an interface matching the json obtained from the backend Then I suddenly realized:</description><content type="html"><![CDATA[<h2 id="what-is-this-post-about">What is this post about?</h2>
<p>I&rsquo;m a huge fan of the SpringBoot backend - Angular frontend combination. And since my UX/UI skills are very limited, I really enjoy working with <a href="https://material.angular.io/">angular material</a>, a really nice library of common widgets implemented as Angular components using the material design.</p>
<p>I found myself doing the same thing over and over again:</p>
<ol>
<li>generate a table component, using the <a href="https://material.angular.io/guide/schematics">material table schematic</a></li>
<li>create a service with Angular CLI connecting to a SpringBoot backend to retrieve objects, using the typical CRUD methods (getAll, save, delete, &hellip;)</li>
<li>create an interface matching the json obtained from the backend</li>
</ol>
<p>Then I suddenly realized:</p>
<blockquote>
<p>If the material table schematic exists and I can generate components using the Angular CLI, shouldn&rsquo;t it be possible to create my own schematic that executes the above steps?</p>
</blockquote>
<p>Short answer: Yes, it&rsquo;s possible! A quick search led me to <a href="https://angular.io/guide/schematics-authoring">the offical docs</a> and <a href="https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2">a post on the offical Angular blog</a>. Below I describe my journey how I tackled this challenge!</p>
<h2 id="install--generate-boilerplate">Install &amp; Generate boilerplate</h2>
<p>This one is easy, just follow along with the steps mentioned in the Angular blogpost.</p>
<h2 id="calling-material-table-schematics-and-chaining-tasks">Calling Material Table schematics and Chaining tasks</h2>
<p>As mentioned in the introduction, I need multiple steps</p>
<ol>
<li>call the material table schematics</li>
<li>generate the service and a dummy interface using a template -</li>
</ol>
<p>and that happened to be the next section &lsquo;Calling Another Schematic&rsquo;. I had some trouble finding out what the names were of the collection and schematics, but I figured it out based on the <a href="https://material.angular.io/guide/schematics">Angular Material Schematics Guide</a> and <a href="https://github.com/amcdnl/material-schematics">the source code available on github</a>. For future reference:</p>
<ul>
<li>schematic collection: <code>@angular/material</code></li>
<li>schematic name: <code>table</code></li>
</ul>
<p>When calling <code>externalSchematic</code>, there is also an <code>options</code> parameter - this corresponds to the parameters you can provide using the CLI. Check the <a href="https://github.com/amcdnl/material-schematics/blob/master/src/table/schema.json">schema.json on github</a>. At the bottom of the file, there is the <code>required</code> entry, an array with the mandatory parameters. You should at least add these to the option parameter you provide to <code>externalSchematic</code>.</p>
<h2 id="issue---cannot-find-module-errors">issue - cannot find module errors</h2>
<p>When trying to run my schematic, I ended up having this kind of error:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Cannot find module <span class="s1">&#39;@schematics/angular/utility/change&#39;</span>
Require stack:
- /Users/pieterjd/Documents/table-service/node_modules/@angular/cdk/schematics/utils/ast.js
- /Users/pieterjd/Documents/table-service/node_modules/@angular/cdk/schematics/utils/index.js
- /Users/pieterjd/Documents/table-service/node_modules/@angular/cdk/schematics/index.js
- /Users/pieterjd/Documents/table-service/node_modules/@angular/material/schematics/ng-generate/table/index.js
- /Users/pieterjd/Documents/test-project/node_modules/@angular-devkit/schematics/tools/export-ref.js
- /Users/pieterjd/Documents/test-project/node_modules/@angular-devkit/schematics/tools/index.js
- /Users/pieterjd/Documents/test-project/node_modules/@angular/cli/utilities/json-schema.js
- /Users/pieterjd/Documents/test-project/node_modules/@angular/cli/models/command-runner.js
- /Users/pieterjd/Documents/test-project/node_modules/@angular/cli/lib/cli/index.js
</code></pre></div><p>It took some time to figure out, but my project was missing dependencies on <code>@angular/cdk</code>, <code>@angular/material</code>, <code>@angular-devkit</code>, and so on. After fixing this with the necessary <code>npm install --save</code>, my package.json file now contained all these dependencies:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
<span class="err">//skip</span> <span class="err">other</span> <span class="err">stuff</span>
<span class="nt">&#34;dependencies&#34;</span><span class="p">:{</span>
    <span class="nt">&#34;@angular/animations&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.5&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/cdk&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.3&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/cli&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.5&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/common&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.5&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/core&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.5&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/forms&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.5&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/material&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.3&#34;</span><span class="p">,</span>
    <span class="nt">&#34;@angular/platform-browser&#34;</span><span class="p">:</span> <span class="s2">&#34;^11.0.5&#34;</span><span class="p">,</span>
    <span class="nt">&#34;typescript&#34;</span><span class="p">:</span> <span class="s2">&#34;~4.0.2&#34;</span><span class="p">,</span>
    <span class="nt">&#34;zone.js&#34;</span><span class="p">:</span> <span class="s2">&#34;^0.11.3&#34;</span>
<span class="p">}}</span>
</code></pre></div><h2 id="defining-input-using-schemajson">Defining input using schema.json</h2>
<p>So far all component and service names were hardcoded. Off course you would like to define them on the CLI. That&rsquo;s where the <code>schema.json</code> file comes in - cf <a href="https://angular.io/guide/schematics-authoring#defining-input-options-with-a-schema-and-interfaces">official docs</a>.</p>
<p>In this case, only 2 prompts are required:</p>
<ul>
<li>Entity name, for instance <code>user</code></li>
<li>Backend url, for instance <code>/api/v1/users</code></li>
</ul>
<p>These two inputs then result in a <code>userlist</code> component (generated with the material table schematics), and a <code>UserService</code>with a <code>HttpCLient</code> instance connecting to <code>/api/v1/users</code> to get, post, &hellip; user instances. Both of them are mandatory.</p>
<h2 id="generating-the-service-with-templates">Generating the service with templates</h2>
<p>Generating the boilerplate code is done with templates - not sure, but I think the syntax is based on <a href="https://ejs.co/">EJS</a>.</p>
<p>A bit complicated, but the name of the template file needs to be named in a specific way. In my case, the template filename is <code>__name@dasherize__.service.ts.template</code>. Whatever is between <code>__</code>is interpolated:</p>
<ul>
<li><code>name</code> is a variable</li>
<li><code>@dasherize</code> is a function applied to the variable before the @.  For instance <code>innerHTML</code>is transformed into <code>inner-html</code></li>
</ul>
<p>So if <code>name</code>  has the value <code>actionHero</code>, a file called <code>action-hero.service.ts</code>is generated.</p>
<p>It&rsquo;s rather easy to define this - check following snippet:</p>
<div class="highlight"><pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="kr">const</span> <span class="nx">templateSource</span> <span class="o">=</span> <span class="nx">apply</span><span class="p">(</span><span class="nx">url</span><span class="p">(</span><span class="s1">&#39;./files&#39;</span><span class="p">),</span> <span class="p">[</span>
      <span class="nx">applyTemplates</span><span class="p">({</span>
        <span class="nx">classify</span>: <span class="kt">strings.classify</span><span class="p">,</span>
        <span class="nx">dasherize</span>: <span class="kt">strings.dasherize</span><span class="p">,</span>
        <span class="nx">camelize</span>: <span class="kt">strings.camelize</span><span class="p">,</span>
        <span class="nx">name</span>: <span class="kt">name</span><span class="p">,</span>
        <span class="nx">backendUrl</span>: <span class="kt">_options.backendUrl</span>
      <span class="p">}),</span>
      <span class="nx">move</span><span class="p">(</span><span class="nx">normalize</span><span class="p">(</span><span class="nx">join</span><span class="p">(</span><span class="nx">_options</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="nx">_options</span><span class="p">.</span><span class="nx">servicePath</span><span class="p">)</span> <span class="kr">as</span> <span class="kt">string</span><span class="p">))</span>
    <span class="p">]);</span>
</code></pre></div><ul>
<li>All templates are located in the <code>files</code>subfolder</li>
<li>Next are the rules:
<ul>
<li>an object with functions (<code>classify</code>, <code>dasherize</code>, <code>camelize</code>) and variables (<code>name</code>, <code>backendUrl</code>) to be used in the template are provided to <code>applyTemplates</code></li>
<li>when generation is completed, move the resulting file to some path</li>
</ul>
</li>
</ul>
<h2 id="issue-cannot-read-property-match-of-undefined">Issue: Cannot read property &lsquo;match&rsquo; of undefined</h2>
<p>make sure the <code>normalize</code> function is imported from <code>path</code>, not <code>@angular-devkit/core</code>!</p>
<h2 id="service-template">Service Template</h2>
<p>Writing the service <a href="https://angular.io/guide/schematics-for-libraries#add-template-files">template</a> is now straightforward - note the mix of the code of an actual service and the templating variables and functions as mentioned in a previous section.</p>
<div class="highlight"><pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@angular/core&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">HttpClient</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@angular/common/http&#39;</span><span class="p">;</span>

<span class="c1">//dummy &lt;%= classify(name) %&gt; interface so everything compiles
</span><span class="c1"></span><span class="kr">export</span> <span class="kr">interface</span> <span class="o">&lt;%=</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">{}</span>


<span class="kd">@Injectable</span><span class="p">({</span>
  <span class="nx">providedIn</span><span class="o">:</span> <span class="s1">&#39;root&#39;</span>
<span class="p">})</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="o">&lt;%=</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="nx">Service</span> <span class="p">{</span>
  <span class="kr">private</span> <span class="nx">URL</span>: <span class="kt">string</span> <span class="o">=</span> <span class="s2">&#34;&lt;%= backendUrl %&gt;&#34;</span><span class="p">;</span>
  <span class="kr">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span>: <span class="kt">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="kr">public</span> <span class="nx">getAll</span><span class="p">()</span><span class="o">:</span> <span class="nx">Observable</span><span class="o">&lt;&lt;%=</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kr">get</span><span class="o">&lt;&lt;%=</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">URL</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">save</span><span class="o">&lt;%=</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">(</span><span class="o">&lt;%=</span> <span class="nx">camelize</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;:</span> <span class="o">&lt;%=</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">URL</span><span class="p">,</span> <span class="o">&lt;%=</span> <span class="nx">camelize</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it - I now have a working schematic that will help me generate boring, tedious boilerplate code!</p>
<ul>
<li>Points for improvement:
<ul>
<li>I still need to add manually the new service to the <code>providers</code> section of the <code>app</code> module - this should be possible using schematics as well</li>
<li>automatically add a route pointing to the generated component containing a material table</li>
<li>add an optional Snackbar, displaying a success or error message</li>
</ul>
</li>
<li>Good to know: if you don&rsquo;t use a parameter of the function, you get a nasty &lsquo;not read&rsquo; warning. Prefix the variable with _ and it disappears 👍</li>
</ul>
]]></content></item><item><title>Automate Timesheeting</title><link>https://www.pieterjd.be/posts/automate-timesheeting/</link><pubDate>Sun, 13 Dec 2020 20:54:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/automate-timesheeting/</guid><description>With every job come boring tasks. Number one, by far, is filling out timesheets. And if you are unlucky, as I was in case of the yellow telco, you&amp;rsquo;re dealing with an old dud.
What old dud? I&amp;rsquo;m talking about fusion by Oracle. It has a horrible interface - even entering a single digit is annoying. On top of that, it was an exotic, buggy, beta version - no one wanted to touch it , including Oracle.</description><content type="html"><![CDATA[<p>With every job come boring tasks. Number one, by far, is filling out timesheets. And if you are unlucky, as I was in case of the yellow telco, you&rsquo;re dealing with an old dud.</p>
<h2 id="what-old-dud">What old dud?</h2>
<p>I&rsquo;m talking about fusion by Oracle. It has a horrible interface - even entering a single digit is annoying. On top of that, it was an exotic, buggy, beta version - no one wanted to touch it , including Oracle.</p>
<h2 id="so-how-did-i-do-it">So how did I do it?</h2>
<p>I took this as an opportunity to look into Selenium combined with Python. I was lucky I could book everything on the same timesheet code to ease developing the first version.</p>
<h2 id="typical-management-decision">Typical management decision</h2>
<p>As things go in big corporations, I also had to book my time spent in Jira. As I&rsquo;m allergic to doing things twice (entering time spent in both Jira and Fusion), I started looking for a solution. And I Found one: Jira exposes a REST api - one of the operations is to execute a query for time spent.</p>
<p>The new workflow is now pulling in all my time spent together with the timesheet code from Jira, and then feeding this in the Selenium code.</p>
<p>And while my colleagues were stressing out about filling out their timesheet, I just kicked off my script, went to the kitchen for fresh coffee and by the time I was back at my desk my timesheet was completed and ready to submit.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://jquery.com/">Jquery</a></li>
<li><a href="https://www.atlassian.com/blog/jira-software/jql-the-most-flexible-way-to-search-jira-14">Getting started with JQL</a> - <a href="https://support.atlassian.com/jira-service-management-cloud/docs/use-advanced-search-with-jira-query-language-jql/">Advanced Search with JQL</a></li>
<li><a href="https://www.w3schools.com/python/default.asp">W3School Python Tutorial</a> - <a href="https://docs.python.org/3/library/json.html">Reading JSON</a></li>
<li><a href="https://selenium-python.readthedocs.io/">Selenium with Python</a></li>
</ul>
]]></content></item><item><title>Deploy Hugo generated site to Github Pages - Part 2</title><link>https://www.pieterjd.be/posts/deploy-hugo-site-to-ghpages-part2/</link><pubDate>Wed, 18 Nov 2020 19:18:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/deploy-hugo-site-to-ghpages-part2/</guid><description>I still had to run the ./deploy.sh script after committing changes. Not anymore - I&amp;rsquo;m calling this script in a github action being run after a push to master!
Some refactoring was required - I moved the command related to pushing the generating site to a separate script, and this script is called from github actions.
UPDATE: this did not work at all! I resorted to trying out a lot of push Github Actions but none worked.</description><content type="html"><![CDATA[<p>I still had to run the <code>./deploy.sh</code> script after committing changes. Not anymore - I&rsquo;m calling this script in a github action being run after a push to <code>master</code>!</p>
<p>Some refactoring was required - I moved the command related to pushing the generating site to a separate script, <del>and this script is called from github actions</del>.</p>
<p><strong>UPDATE</strong>: this did not work at all! I resorted to trying out a lot of push Github Actions but none worked. Then I stumbled on this specific &lsquo;Deploy to GH Pages&rsquo; action and this one did the trick. Only downside now is the commit message - every commit message is suffixed with the name of my hugo repo and the commit hash.</p>
<p>Below is the complete action. Enjoy!</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build and Deploy</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">master]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">setup git submodules</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">          git submodule init
</span><span class="sd">          git submodule update
</span><span class="sd">      - name: setup hugo
</span><span class="sd">        uses: peaceiris/actions-hugo@v2
</span><span class="sd">        with:
</span><span class="sd">          hugo-version: &#39;0.75.1&#39;
</span><span class="sd">      - name: build hugo website
</span><span class="sd">        run: hugo --minify
</span><span class="sd">      - name: dump information
</span><span class="sd">        env:
</span><span class="sd">          TO_DUMP: ${{ toJson(github.event) }}
</span><span class="sd">        run: echo &#34;$TO_DUMP&#34;
</span><span class="sd">      - name: deploy to github Pages
</span><span class="sd">        uses: peaceiris/actions-gh-pages@v3
</span><span class="sd">        with:
</span><span class="sd">          publish_dir: ./pieterjd.github.io
</span><span class="sd">          external_repository: pieterjd/pieterjd.github.io
</span><span class="sd">          publish_branch: master
</span><span class="sd">          personal_token: ${{ secrets.GH_PAGES_ACCESS_TOKEN }}
</span><span class="sd">          user_name: &#39;github-actions[bot]&#39;
</span><span class="sd">          user_email: &#39;github-actions[bot]@users.noreply.github.com&#39;
</span><span class="sd">          full_commit_message: ${{ github.event.head_commit.message }}
</span></code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://pages.github.com/">Github Pages</a></li>
<li><a href="https://gohugo.io/">Hugo</a></li>
<li><a href="https://github.com/features/actions">Github Actions</a> - <a href="https://docs.github.com/en/actions">Github Actions Docs</a></li>
</ul>
]]></content></item><item><title>Adventures with Microsoft Azure</title><link>https://www.pieterjd.be/posts/adventures-with-azure/</link><pubDate>Tue, 03 Nov 2020 14:48:32 +0200</pubDate><guid>https://www.pieterjd.be/posts/adventures-with-azure/</guid><description>The last few weeks I spent looking into Microsoft Azure. I followed along with the fundamental learning paths, but I also focused mostly on the spring boot part. Here are some findings.
Azure Spring Cloud workshop The Azure Spring Cloud Workshop is a nice overview how to deploy your spring boot application to Azure.
Take-aways Something nowhere mentioned is that you get a Eureka Discover compatible server OOTB :) You just need to add the Eureka Discovery Client dependency.</description><content type="html"><![CDATA[<p>The last few weeks I spent looking into Microsoft Azure. I followed along with the fundamental learning paths, but I also focused mostly on the spring boot part. Here are some findings.</p>
<h2 id="azure-spring-cloud-workshop">Azure Spring Cloud workshop</h2>
<p>The <a href="https://docs.microsoft.com/en-gb/learn/modules/azure-spring-cloud-workshop/">Azure Spring Cloud Workshop</a> is a nice overview how to deploy your spring boot application to Azure.</p>
<h3 id="take-aways">Take-aways</h3>
<ul>
<li>Something nowhere mentioned is that you get a Eureka Discover compatible server OOTB :) You just need to add the <code>Eureka Discovery Client</code> dependency.</li>
<li>The Cloud gateway works great with the discovery service. Without any configurations, it queries the discover service to get a list of services and it creates automatically endpoints for each service. For instance I had a running <code>todo-service</code>, with <code>@GetMapping(&quot;/todos&quot;)</code>returning all todos. Using the gateway, you get all todos by sending a request to  <code>&lt;GATEWAY-URI&gt;/TODO-SERVICE/</code></li>
<li>Since the discovery is nowhere to be found in the Azure dashboard - at least <strong>I</strong> was unable to do so - I added an endpoint in the gateway service
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/eureka&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EurekaController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">DiscoveryClient</span> <span class="n">discoveryClient</span><span class="o">;</span>

    <span class="nd">@GetMapping</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">services</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">discoveryClient</span><span class="o">.</span><span class="na">getServices</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ul>
<h2 id="toy-service---the-profanity-service">Toy service - the profanity service</h2>
<p>I had an additional day to spend on Azure. I wanted to use the <a href="https://docs.microsoft.com/en-gb/azure/cognitive-services/content-moderator/">azure content moderation service</a>. I only needed a source to get some questionable content. And then I remembered this twitter account
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">fuck u</p>&mdash; Developers Swearing (@gitlost) <a href="https://twitter.com/gitlost/status/1325588169060999176?ref_src=twsrc%5Etfw">November 8, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>And its follow-up tweet
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">fuck u again</p>&mdash; Developers Swearing (@gitlost) <a href="https://twitter.com/gitlost/status/1325588170294046722?ref_src=twsrc%5Etfw">November 8, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>So I made these services:</p>
<ul>
<li><code>TwitterService</code>using <a href="http://twitter4j.org/en/index.html">twitter4j</a> returning the last 20 tweets as Strings</li>
<li><code>ModerationSerivce</code> connecting to the Azure Content Moderation Service returning scores for offensiveness, sexual suggestiveness and sexual explicitness</li>
<li><code>OffensiveTweetService</code> pipes the tweets into the <code>ModerationService</code>the original tweet with 3 scores</li>
</ul>
<p>To make it more visual, I refreshed my jQuery skills and sorted the tweets based on each of the 3 scores.
<img src="/assets/images/adventures-with-azure/webpage.png" /></p>
<p>All in all, it was a fun project to work on. Unfortunately it no longer is available online as my free credit is already used.</p>
]]></content></item><item><title>Hello World - Spring Cloud Version</title><link>https://www.pieterjd.be/posts/hello-world-spring-cloud-version/</link><pubDate>Sat, 17 Oct 2020 09:12:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/hello-world-spring-cloud-version/</guid><description>I&amp;rsquo;ve wanting to look into some microservices, but I never got around to it. I stumbled upon Java Brain&amp;rsquo;s Spring boot microservice course, which is a great series of videos explaining all the concepts.
My hello world - Spring Cloud Version contains 3 microservices:
datetime-service: returns the current datetime salutation-service: returns at random a salutation for male or female persons greeting-service: uses the first 2 services to compose a greeting Here&amp;rsquo;s a diagram how they all interact with each other: Keypoints Here are some things that stuck into my head after watching the course:</description><content type="html"><![CDATA[<p>I&rsquo;ve wanting to look into some microservices, but I never got around to it. I stumbled upon <a href="https://www.youtube.com/c/JavaBrainsChannel/playlists?view=50&amp;sort=dd&amp;shelf_id=12">Java Brain&rsquo;s Spring boot microservice course</a>, which is a great series of videos explaining all the concepts.</p>
<p>My hello world - Spring Cloud Version contains 3 microservices:</p>
<ul>
<li><code>datetime-service</code>: returns the current datetime</li>
<li><code>salutation-service</code>: returns at random a salutation for male or female persons</li>
<li><code>greeting-service</code>: uses the first 2 services to compose a greeting</li>
</ul>
<p>Here&rsquo;s a diagram how they all interact with each other:
<img src="./springcloud-helloworld.png" alt=""></p>
<h2 id="keypoints">Keypoints</h2>
<p>Here are some things that stuck into my head after watching the course:</p>
<ul>
<li>
<p>It&rsquo;s ok to duplicate <code>data</code>classes. Each microservice should be standalone. As a consequence, there is some code duplication in the model package.</p>
<p>A common dependency on the datamodel breaks the standalone principle.</p>
</li>
<li>
<p>Each REST endpoint returns an object. This makes it easy to change the return values.</p>
<p>Suppose an endpoint returns a String. After some time, you need to return a List as well. Now the response of the endpoint breaks the consuming clients.  If an object is returned, you can add a field without breaking anything, because spring only unserializes the field it&rsquo;s aware of.</p>
</li>
<li>
<p>Configure the server port explicitly. This avoids port collision 😃. Don&rsquo;t use <code>0</code>. When running, a random port will be assigned but the instances will not show up in the discovery service (each instance has a name where the configured port value is used as unique identifier. If you spin up all your instance with port 0, there is nothing unique).</p>
</li>
<li>
<p>From the level 2 series: keep in mind hystrix wraps the class containing the <code>@HystrixCommand</code> annotation in a <strong>PROXY CLASS</strong> - I&rsquo;ve put it in bold as this is very important.</p>
<ul>
<li>if the fallbackMethod is a method in the same class it will not work, <a href="https://youtu.be/1EIb-4ipWFk?list=PLqq-6Pq4lTTbXZY_elyGv7IkKrfkSrX5e&amp;t=517">because of the proxy class</a>!</li>
<li>My solution:
<ol>
<li>The service class containing the method that can go awry, also contains the fallback method. No <code>@HystrixCommand</code> involved here</li>
<li>The <code>RestController</code> class has the service autowired. To be precise: the service wrapped in <strong>the proxy class</strong>. The endpoint calling the awry service method <strong>is</strong> annotated with the<code>@HystrixCommand</code> annotation</li>
<li>The fallbackMethod defined in the <code>RestController</code> class just delegates to the fallback method of the autowired service. This is not an issue, as the fallback method is also wrapped in the proxy class</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="spinning-up-multiple-instances">Spinning up multiple instances</h2>
<p>Kick of the jar and set the <code>spring.port</code> property with the <code>java</code>  command. However it&rsquo;s quite tedious if you want 4 instances of each of the three microservices. Below an powershell snippet on how to kick things off quickly. It generates the commands that you then can paste in the bash terminal</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nv">$template</span> <span class="p">=</span> <span class="s1">&#39;java -Dserver.port={0} -jar {1} &amp;&#39;</span>
<span class="nv">$startPort</span><span class="p">=</span><span class="n">50000</span>
<span class="nv">$increment</span> <span class="p">=</span> <span class="n">100</span>
<span class="c">#get jars except eureka-server</span>
<span class="nb">gci </span><span class="n">-Recurse</span> <span class="p">*.</span><span class="n">jar</span> <span class="p">|?{</span><span class="nv">$_</span><span class="p">.</span><span class="n">name</span> <span class="o">-notlike</span> <span class="s1">&#39;*eureka*&#39;</span><span class="p">}</span> <span class="p">|%{</span>
 <span class="nv">$jarName</span> <span class="p">=</span> <span class="nv">$_</span>
 <span class="n">0</span><span class="p">..</span><span class="n">3</span> <span class="p">|</span> <span class="p">%{</span><span class="nv">$port</span> <span class="p">=</span> <span class="nv">$startPort</span> <span class="p">+</span><span class="nv">$_</span><span class="p">;</span> <span class="nv">$template</span> <span class="o">-f</span> <span class="nv">$port</span><span class="p">,</span><span class="nv">$jarName</span><span class="p">}</span>
 <span class="nv">$startPort</span><span class="p">+=</span><span class="nv">$increment</span>
<span class="p">}</span>
</code></pre></div><p>Sample output:</p>
<pre><code>java -Dserver.port=50000 -jar /Users/pjd/_dev/springcloud-helloworld/datetime-service/target/datetime-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50001 -jar /Users/pjd/_dev/springcloud-helloworld/datetime-service/target/datetime-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50002 -jar /Users/pjd/_dev/springcloud-helloworld/datetime-service/target/datetime-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50003 -jar /Users/pjd/_dev/springcloud-helloworld/datetime-service/target/datetime-service-0.0.1-SNAPSHOT.jar &amp;

java -Dserver.port=50100 -jar /Users/pjd/_dev/springcloud-helloworld/greeting-service/target/greeting-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50101 -jar /Users/pjd/_dev/springcloud-helloworld/greeting-service/target/greeting-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50102 -jar /Users/pjd/_dev/springcloud-helloworld/greeting-service/target/greeting-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50103 -jar /Users/pjd/_dev/springcloud-helloworld/greeting-service/target/greeting-service-0.0.1-SNAPSHOT.jar &amp;

java -Dserver.port=50200 -jar /Users/pjd/_dev/springcloud-helloworld/salutation-service/target/salutation-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50201 -jar /Users/pjd/_dev/springcloud-helloworld/salutation-service/target/salutation-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50202 -jar /Users/pjd/_dev/springcloud-helloworld/salutation-service/target/salutation-service-0.0.1-SNAPSHOT.jar &amp;
java -Dserver.port=50203 -jar /Users/pjd/_dev/springcloud-helloworld/salutation-service/target/salutation-service-0.0.1-SNAPSHOT.jar &amp;
</code></pre>]]></content></item><item><title>Tools for Mac OS I use for easier development</title><link>https://www.pieterjd.be/posts/mac-free-tools/</link><pubDate>Sat, 22 Aug 2020 12:10:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/mac-free-tools/</guid><description>This is more a note to self so I know what tools to install when I purchase a new laptop :)
Free applications Rectangle App allows for easy moving and resizing of windows. For instance resize the current window so it takes the left half of the screen, the top 1/3rd of the screen, &amp;hellip; Atom, the famous editor with plenty of plugins - I personally use it when I need to write or program something small and I don&amp;rsquo;t want to fire up a fullblown IDE iTerm2 a more fancy shell with additional info on the git status and so on Postman for testing REST endpoints.</description><content type="html"><![CDATA[<p>This is more a note to self so I know what tools to install when I purchase a new laptop :)</p>
<h2 id="free-applications">Free applications</h2>
<ul>
<li><a href="https://rectangleapp.com/">Rectangle App</a> allows for easy moving and resizing of windows. For instance resize the current window so it takes the left half of the screen, the top 1/3rd of the screen, &hellip;</li>
<li><a href="http://atom.io">Atom</a>, the famous editor with plenty of plugins - I personally use it when I need to write or program something small and I don&rsquo;t want to fire up a fullblown IDE</li>
<li><a href="www.iterm2.com">iTerm2</a> a more fancy shell with additional info on the git status and so on</li>
<li><a href="https://www.postman.com/">Postman</a> for testing REST endpoints. I also must checkout <a href="https://insomnia.rest/">Insomnia</a></li>
<li><a href="https://www.texstudio.org/">texstudio</a> for the ocassional LaTeX documents</li>
<li><a href="https://typora.io/">Typora</a> - a really cool markdown editor with support for syntax highlighting, some charts and latex equations</li>
<li>chrome</li>
<li>Homebrew <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</code></li>
<li><a href="https://nodejs.org/en/download/">Node.js</a></li>
<li>Yeoman <code>npm install -g yo</code></li>
<li>iTerm2
<ul>
<li><code>brew install zsh</code></li>
<li><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="paid-application">Paid application</h2>
<ul>
<li><a href="https://www.jetbrains.com/idea/">IntelliJ</a> is still my favorite :)</li>
<li><a href="https://www.cyberghostvpn.com/">Cyberghost VPN</a></li>
</ul>
<h2 id="backgrounds">Backgrounds</h2>
<ul>
<li><a href="https://wallpapercave.com/w/wp4989100">3 stripes</a></li>
<li><a href="https://wallpapercave.com/w/wp6582780">2 silouets</a></li>
<li><a href="https://wallpapercave.com/w/wp1828902">1 slogan</a></li>
</ul>
]]></content></item><item><title>Get git-commit-id-plugin working with heroku</title><link>https://www.pieterjd.be/posts/heroku-and-git-commit-id-plugin/</link><pubDate>Sun, 09 Aug 2020 21:59:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/heroku-and-git-commit-id-plugin/</guid><description>Spring boot offers out-of-the-box support for git-commit-id-plugin, where you can bind git properties to Spring variables. However heroku cannot work with this.
After some reading up, it appears that the hidden .gitsubfolder is not pushed to heroku. Since during build time the git.propertiesfile is generated and saved in the target folder, the git-commit-id-plugin will fail as there is no .gitsubfolder.
Then I stumbled on the heroku-maven-plugin. This plugin allows to build your project locally and then push the artifact to heroku - and that&amp;rsquo;s what I need.</description><content type="html"><![CDATA[<p>Spring boot offers out-of-the-box support for <code>git-commit-id-plugin</code>, where you can bind git properties to Spring variables. However heroku cannot work with this.</p>
<p>After some reading up, it appears that the hidden <code>.git</code>subfolder is not pushed to heroku. Since during build time the <code>git.properties</code>file is generated and saved in the <code>target</code> folder, the git-commit-id-plugin will fail as there is no <code>.git</code>subfolder.</p>
<p>Then I stumbled on the <a href="https://devcenter.heroku.com/articles/deploying-java-applications-with-the-heroku-maven-plugin"><code>heroku-maven-plugin</code></a>. This plugin allows to build your project locally and then push the artifact to heroku - and that&rsquo;s what I need.</p>
<p>Just go through the instructions that are very clear and complete - I had to configure maven to deploy the stand-alone jar file. And it works :)</p>
]]></content></item><item><title>IntelliJ Find and Replace with regular expressions</title><link>https://www.pieterjd.be/posts/intellij-replace-regex/</link><pubDate>Sun, 10 May 2020 12:16:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/intellij-replace-regex/</guid><description>Regular expressions are not my forte, but never the less very useful. Recently I faced this fictional code snippet:
var a = someFunc(b, c); //..... var d = someFunc(b, d); Almost a gazillion of calls to someFunc needed to be replaced with otherFunc. Cue big gasp! As always, IntelliJ is your go-to companion you always can rely on.
I already noticed the regex checkbox in the Find/Replace dialog. Now it&amp;rsquo;s time to put this thing into practice.</description><content type="html"><![CDATA[<p>Regular expressions are not my forte, but never the less very useful. Recently I faced this fictional code snippet:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">someFunc</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">);</span>
<span class="c1">//.....
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">someFunc</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">d</span><span class="p">);</span>
</code></pre></div><p>Almost a gazillion of calls to <code>someFunc</code> needed to be replaced with <code>otherFunc</code>. Cue big gasp! As always, IntelliJ is your go-to companion you always can rely on.</p>
<p>I already noticed the regex checkbox in the Find/Replace dialog. Now it&rsquo;s time to put this thing into practice. And it just works great.</p>
<p>In the find input, you just enter any regular expression, in my case <code>someFunc\((.*)\)</code>. In plain English, I&rsquo;m looking for:</p>
<ol>
<li>the literal text <code>someFunc</code>;</li>
<li>followed by a left parenthesis. Parenthesis&rsquo;s are used for grouping of characters, hence the escaping with a backslash;</li>
<li>Next part is <code>(.*)</code>, which means &lsquo;take any characters and consider it as 1 group&rsquo;;</li>
<li>Ending with the closing parenthesis.</li>
</ol>
<p>Now the group can be re-used in the replace input. So for me it was <code>otherFunc\($1\)</code>. Again escaping the parenthesis and between them, the group as defined in the regular expression in the input. So for the first statement in the snippet above, <code>$1</code> would be <code>b, c</code>.</p>
<p>Once again, it&rsquo;s proven that regular expressions are worthwhile learning!</p>
]]></content></item><item><title>Deploy Hugo generated site to Github Pages</title><link>https://www.pieterjd.be/posts/deploy-hugo-site-to-ghpages/</link><pubDate>Sat, 02 May 2020 20:48:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/deploy-hugo-site-to-ghpages/</guid><description>Deploying to github pages is not as easy as I thought. I tried several things for building a Github Action workflow, however this is only meant for actions related to the repository in question.
In the end, I follow the approach as mentioned on the Hugo website with a local script. I have pimped it by fetching the latest commit message and the use this message for committing the changes in the generated site.</description><content type="html"><![CDATA[<p>Deploying to github pages is not as easy as I thought. I tried several things for building a Github Action workflow, however this is only meant for actions related to the repository in question.</p>
<p>In the end, I follow the <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">approach as mentioned on the Hugo website</a> with a local script. I have pimped it by fetching the latest commit message and the use this message for committing the changes in the generated site.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="c1"># If a command fails then the deploy stops</span>
<span class="nb">set</span> -e

<span class="nb">printf</span> <span class="s2">&#34;\033[0;32mDeploying updates to GitHub...\033[0m\n&#34;</span>
<span class="nb">printf</span> <span class="s2">&#34;\033[0;32mGetting last commit message...\033[0m\n&#34;</span>
<span class="nv">commsg</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>git log -1 --pretty<span class="o">=</span>%B<span class="k">)</span><span class="s2">&#34;</span>
<span class="c1"># Build the project.</span>
<span class="nb">printf</span> <span class="s2">&#34;\033[0;32mBuilding the site...\033[0m\n&#34;</span>
hugo <span class="c1"># if using a theme, replace with `hugo -t &lt;YOURTHEME&gt;`</span>

<span class="c1"># Go To Public folder</span>
<span class="nb">cd</span> pieterjd.github.io

<span class="c1"># Add changes to git.</span>
git add .

<span class="c1"># Commit changes.</span>
git commit -m <span class="s2">&#34;</span><span class="nv">$commsg</span><span class="s2">&#34;</span>
<span class="c1"># Push source and build repos.</span>
git push origin master

</code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://pages.github.com/">Github Pages</a></li>
<li><a href="https://gohugo.io/">Hugo</a></li>
</ul>
]]></content></item><item><title>Moving from Jekyll to Hugo</title><link>https://www.pieterjd.be/posts/moving-from-jekyll-to-hugo/</link><pubDate>Fri, 01 May 2020 20:54:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/moving-from-jekyll-to-hugo/</guid><description>I&amp;rsquo;ve been using Jekyll for a few years now. Main reason to use it, is its nice integration with Github Pages. However the frustrations now have outweighted the advantages.
Not so cool What annoyed me tremendously is getting Jekyll to run. All the ruby issues were hard to solve for me.
Next in line is how to structure the content. As long as you only want to blog, Jekyll is good enough.</description><content type="html"><![CDATA[<p>I&rsquo;ve been using Jekyll for a few years now. Main reason to use it, is its nice integration with Github Pages. However the frustrations now have outweighted the advantages.</p>
<h2 id="not-so-cool">Not so cool</h2>
<p>What annoyed me tremendously is getting Jekyll to run. All the ruby issues were hard to solve for me.</p>
<p>Next in line is how to structure the content. As long as you only want to blog, Jekyll is good enough. If you need another kind of collection, then things get tedious. I took me a very long time to figure out how to get my talks organized and displayed just the way I want.</p>
<p>Finally getting the layouts right is not that easy. It takes quite some tampering to make it right.</p>
<h2 id="hugo-as-alternative">Hugo as alternative</h2>
<p>I&rsquo;ve already read a lot about a Hugo. It seemed interesting, but never took the time to look more into it. Now the time has come, and so far all is good.</p>
<p>I really like the exhaustive docs, and the very nice quickstart. Next is the built-in import from jekyll. And finally, no tampering to set up a collection of similar post (eg blogpost, talks, recipe, quote, &hellip;). The structure is completely file-based.</p>
<p>Also browser hot reloading after a rebuild - Awesome!</p>
<h2 id="getting-my-hands-dirty">Getting my hands dirty</h2>
<p>I basically followed the quickstart instructions.</p>
<ol>
<li>
<p>Install hugo using brew</p>
</li>
<li>
<p>Create the new site</p>
</li>
<li>
<p>Add a theme - I chose the hermit theme as it&rsquo;s complete and fits my needs</p>
</li>
<li>
<p>Import the jekyll post using the <a href="https://gohugo.io/commands/hugo_import_jekyll/#hugo-import-jekyll"><code>hugo import jekyll</code></a> command. The blog posts were wrongly copied in the <code>post</code> folder instead of the <code>posts</code> folder.</p>
</li>
<li>
<p>The <code>import</code> command didn&rsquo;t import all content: my talks and pages weren&rsquo;t copied. I had to manually create the <code>talks</code> folder and the folders for the static pages such as the about page.</p>
</li>
<li>
<p>On some pages I used css(<a href="https://www.pieterjd.be/posts/2019-11-11-colors-for-presentations/">colors for presentation</a> post) and javascript(linkedin badge on the <a href="/about">about</a> page). This wasn&rsquo;t rendered as both css and js in markdown is considered as a security issue. This was fixed by setting the unsafe <code>propety</code> of <code>[markup.goldmark.renderer]</code> to <code>true</code>.</p>
</li>
<li>
<p>Next I wanted the same overview of my talks in descending order. I took some time to figure out, but it was easier than to get the same overview in Jekyll.</p>
<p>In short, a theme provides a layouts. An overview of posts, talks, &hellip; is rendered using the list layout usually located at <code>themes/&lt;themename&gt;/layouts/_default</code>. You can override this by creating a <code>layout</code> folder next to your <code>content</code> folder. In my case a I create a subfolder <code>talks</code> (the content I want a custom overview for) and put my custom list template in there. The full path to the custom list template is <code>/layouts/talks/list.html</code>.</p>
</li>
<li>
<p>Next I had to fix the internal links. That&rsquo;s an easy find and replace for <code>post_url</code> - the Jekyll syntax to link to other content- with <a href="https://gohugo.io/content-management/cross-references/">Hugo&rsquo;s specific link syntax</a>.</p>
</li>
<li>
<p>On the talks pages there was a table of content in the sidebar. The Jekyll <code>{{toc}}</code> command is off course no longer rendered.</p>
</li>
<li>
<p>Finally I had to check all static assets. Seems that they were properly imported with the <code>hugo import jekyll</code> command.</p>
</li>
</ol>
<p>Only thing left to do, is how to get the generated files on github pages. To be continued.</p>
]]></content></item><item><title>Colors for your presentations</title><link>https://www.pieterjd.be/posts/2019-11-11-colors-for-presentations/</link><pubDate>Mon, 11 Nov 2019 19:13:12 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-11-11-colors-for-presentations/</guid><description>As I will be speaking at the Data Science Leuven meetup this Thursday, I&amp;rsquo;m preparing my slidedeck.
To make it visually more attractive, I&amp;rsquo;ve been looking into color schemes. And this quote was quite interesting:
Limit yourself to maximum 4 different colors
In the end I found inspiration from the slideteam website, the &amp;lsquo;Red and Grey&amp;rsquo; color palette.
Gray : #EFEFEF Darkgray : #7F7F7F Red : #E04556 Darkred : #2B1515 These colors are then combined so there is contrast in the combination.</description><content type="html"><![CDATA[<p>As I will be speaking at the <a href="https://www.meetup.com/Data-Science-Leuven/events/264310676/">Data Science Leuven meetup</a> this Thursday, I&rsquo;m preparing my slidedeck.</p>
<p>To make it visually more attractive, I&rsquo;ve been looking into color schemes. And this quote was quite interesting:</p>
<blockquote>
<p>Limit yourself to maximum 4 different colors</p>
</blockquote>
<p>In the end I found inspiration from the slideteam website, the <a href="https://www.slideteam.net/color-palette-for-presentation-red-and-grey.html">&lsquo;Red and Grey&rsquo; color palette</a>.</p>
<ul>
<li><span style='color: #EFEFEF'>Gray</span> : #EFEFEF</li>
<li><span style='color: #7F7F7F'>Darkgray</span> : #7F7F7F</li>
<li><span style='color: #E04556'>Red</span> : #E04556</li>
<li><span style='color: #2B1515'>Darkred</span> : #2B1515</li>
</ul>
<p>These colors are then combined so there is contrast in the combination. Below you see a box with blue background and red dotted border for constrast with the used color combination:</p>
<span style="background-color: blue;border-width: 5px;border-color: red;border-style: dashed;">
  <span style='background-color: #EFEFEF;color: #7F7F7F'>Darkgray on gray background</span>
  <span style='background-color: #EFEFEF;color: #E04556'>Red on gray background</span>
  <span style='background-color: #EFEFEF;color: #2B1515'>Darkred on gray background</span>
</span>
<p>It&rsquo;s hard to tell but the colors are a bit softer than in the first list without any background color.</p>
]]></content></item><item><title>Writing SQL for an unfamiliar PHP application</title><link>https://www.pieterjd.be/posts/2019-09-21-writing-sql-for-unfamiliar-php-application/</link><pubDate>Sat, 21 Sep 2019 10:33:12 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-09-21-writing-sql-for-unfamiliar-php-application/</guid><description>As I&amp;rsquo;m currently working for a famous yellow telco with a huge legacy, I recently had to deal with a PHP application. Although there is a PHP dedicated team, we were forced asked to deal with the PHP part as well.
I did have some past experiences with PHP (and to some extend Drupal), so I faced this old dud. Luckily I just needed to spin up a Vagrant box so that was quite easy.</description><content type="html"><![CDATA[<p>As I&rsquo;m currently working for a famous yellow telco with a huge legacy, I recently had to deal with a PHP application. Although there is a PHP dedicated team, we were <del>forced</del> asked to deal with the PHP part as well.</p>
<p>I did have some past experiences with PHP (and to some extend Drupal), so I faced this old dud. Luckily I just needed to spin up a Vagrant box so that was quite easy.</p>
<p>My mission was to add a product. There was a admin page where you could do this manually, but for CI/CD purposes we really needed the SQL. So how to tackle this when you application/database schema and business knowledge is limited?</p>
<p>You can do it the hard way and study and annoy your collegues with a lot of questions. Or you think for a while and you come up with a more creative solution, which was my approach.</p>
<p>MySQL offers a a feature called general log. As the name implies, it logs every single requested query. So I turned it on, added the product using the administrative interface and scraped the queries from the log. I cleaned the queries because all primary and foreign keys where hardcoded, and that&rsquo;s it - job well done.</p>
<p>For completeness, I add the configuration you need to enable general logging in MySQL.</p>
<ul>
<li>Create your log file, eg <code>touch /tmp/mysql.log</code></li>
<li>Open the configuration file, usually called <code>my.cnf</code></li>
<li>Add the following lines to the <code>[mysqld]</code> section
<pre><code>general_log = on
general_log_file = /tmp/mysql.log
</code></pre></li>
<li>Restart MySQL</li>
</ul>
]]></content></item><item><title>Custom property naming strategy with Jackson</title><link>https://www.pieterjd.be/posts/2019-08-11-property-naming-strategy-with-jackson/</link><pubDate>Sun, 11 Aug 2019 14:41:12 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-08-11-property-naming-strategy-with-jackson/</guid><description>For a pet project of mine, I&amp;rsquo;m consuming a REST API. Unfortunately it&amp;rsquo;s probably not written with Spring (Boot), as the body of requests and response are not according to what you&amp;rsquo;re used to, UpperCamelCase instead of lowerCamelCase.
{&amp;#34;SessionKey&amp;#34;:&amp;#34;7d38ec29-d1f3-42e9-b35f-91b505bf3206&amp;#34;, &amp;#34;Status&amp;#34;:&amp;#34;UpdatesComplete&amp;#34; } At first, I thought I could solve it with a @JsonProperty(&amp;quot;...&amp;quot;) annotation on every field, but there are so many of them :o
This can easily be fixed with the property naming class annotation:</description><content type="html"><![CDATA[<p>For a pet project of mine, I&rsquo;m consuming a REST API. Unfortunately it&rsquo;s probably not written with Spring (Boot), as the body of requests and response are not according to what you&rsquo;re used to, UpperCamelCase instead of lowerCamelCase.</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">&#34;SessionKey&#34;</span><span class="p">:</span><span class="s2">&#34;7d38ec29-d1f3-42e9-b35f-91b505bf3206&#34;</span><span class="p">,</span>
<span class="nt">&#34;Status&#34;</span><span class="p">:</span><span class="s2">&#34;UpdatesComplete&#34;</span>
<span class="p">}</span>
</code></pre></div><p>At first, I thought I could solve it with a <code>@JsonProperty(&quot;...&quot;)</code> annotation on every field, but there are so many of them :o</p>
<p>This can easily be fixed with the property naming class annotation:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@JsonNaming</span><span class="o">(</span><span class="n">PropertyNamingStrategy</span><span class="o">.</span><span class="na">UpperCamelCaseStrategy</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeClassName</span> <span class="o">{}</span>
</code></pre></div>]]></content></item><item><title>Spring boot without a web container</title><link>https://www.pieterjd.be/posts/2019-07-31-springboot-without-tomcat/</link><pubDate>Wed, 31 Jul 2019 18:34:12 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-07-31-springboot-without-tomcat/</guid><description>I really like spring boot a lot - just throw in some dependencies and BAM it&amp;rsquo;s configured right out of the box.
For a pet project of mine, I&amp;rsquo;m consuming a REST API. So I included the spring-boot-starter-web artificact.
Not so surprisingly, the logs showed Tomcat was booting. In this particular project, I don&amp;rsquo;t need tomcat or any other web container for that matter. So how to exclude this?
My first guess was the application properties, but there was nothing to turn the web container on or off.</description><content type="html"><![CDATA[<p>I really like spring boot a lot - just throw in some dependencies and <strong>BAM</strong> it&rsquo;s configured right out of the box.</p>
<p>For a pet project of mine, I&rsquo;m consuming a REST API. So I included the <code>spring-boot-starter-web</code> artificact.</p>
<p>Not so surprisingly, the logs showed Tomcat was booting. In this particular project,
I don&rsquo;t need tomcat or any other web container for that matter. So how to exclude this?</p>
<p>My first guess was the application properties, but there was nothing to turn the web container on or off. And then I remembered:</p>
<blockquote>
<p>Whatever is found in the classpath will be configured</p>
</blockquote>
<p><code>spring-boot-starter-web</code> depends on:</p>
<ul>
<li>Core spring</li>
<li>Web MVC</li>
<li>Jackson</li>
<li>Validation</li>
<li>Embedded container - tomcat</li>
<li>Logging</li>
</ul>
<p>So disabling Tomcat comes down to excluding it in the pom file:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;exclusions&gt;</span>
      <span class="nt">&lt;exclusion&gt;</span>
          <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
          <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;/exclusion&gt;</span>
  <span class="nt">&lt;/exclusions&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div>]]></content></item><item><title>How to check if a row with a specific column value exists in Spring Data</title><link>https://www.pieterjd.be/posts/2019-06-11-jpa-check-if-row-exists-with-property-value/</link><pubDate>Tue, 11 Jun 2019 19:16:00 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-06-11-jpa-check-if-row-exists-with-property-value/</guid><description>Spring Data has a great declarative way of defining queries, called derived queries. Suppose you have a Person class with an email field. Then you can define the following method in a Repository interface:
public interface PersonRepository extends JpaRepository&amp;lt;Person,Long&amp;gt;{ List&amp;lt;Person&amp;gt; findByEmail(String email); } Spring derives the query based on the method name, in this case a query to retrieve all persons with a given value for the email field.
As you can see, the method returns a List.</description><content type="html"><![CDATA[<p>Spring Data has a great declarative way of defining queries, called derived queries. Suppose you have a Person class with an email field. Then you can define the following method in a
Repository interface:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PersonRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span><span class="n">Long</span><span class="o">&gt;{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">findByEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>Spring derives the query based on the method name, in this case a query to retrieve all persons with a given value for the email field.</p>
<p>As you can see, the method returns a <code>List</code>. If you want to process all Persons, that is ok. But sometimes you want to know &lsquo;does a row with this particular value exist?&rsquo;.</p>
<p>One way to do this is as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">if</span><span class="o">(!</span><span class="n">personRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="s">&#34;test@mail.com&#34;</span><span class="o">).</span><span class="na">isEmpty</span><span class="o">()){</span>
  <span class="c1">//do something if a person with the test email already exists in the repository
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>Personally, the additional call to the <code>isEmpty()</code> method is a bit too much for me. This can be solved as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PersonRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span><span class="n">Long</span><span class="o">&gt;{</span>
  <span class="nd">@Query</span><span class="o">(</span><span class="s">&#34;SELECT CASE WHEN COUNT(c) &gt; 0 THEN true ELSE false END FROM Person p WHERE p.email = :email&#34;</span><span class="o">)</span>
    <span class="kt">boolean</span> <span class="nf">existsByEmail</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;email&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">email</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>Now the method does return a boolean, but then again we now have this ugly case in the query. Is there a better way?</p>
<p>Yes, there is - but it is very well hidden in <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repository-query-return-types">one of the appendices of the spring data docs</a>. A query can in fact return a <code>boolean</code>. As always,
there is a disclaimer stating</p>
<blockquote>
<p>consult the store-specific documentation for the exact list of supported return types, because some types listed here might not be supported in a particular store.</p>
</blockquote>
<p>So we can just update the very first code snippet to:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PersonRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span><span class="n">Long</span><span class="o">&gt;{</span>
  <span class="kt">boolean</span> <span class="nf">findByEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">);</span> <span class="c1">//now returns a boolean instead of a List&lt;Person&gt;
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div>]]></content></item><item><title>Postgraduate Studies in Big Data &amp; Analytics in Business and Management</title><link>https://www.pieterjd.be/posts/2019-04-30-pg-big-data-analytics-project/</link><pubDate>Tue, 30 Apr 2019 18:34:12 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-04-30-pg-big-data-analytics-project/</guid><description>A year ago, In enrolled in the &amp;ldquo;Postgraduate Studies in Big Data &amp;amp; Analytics in Business and Management&amp;rdquo; at KU Leuven. And today, the project I&amp;rsquo;ve been working on for the past 3 months came to a conclusion with the final presentation.
The dataset I&amp;rsquo;ve been working on was collected by The Belgian federal police during 2014-2016 and contains over 52K car crashes. It has been enriched by Informatie Vlaanderen with additional information on weather conditions, road conditions and severity of the accident.</description><content type="html"><![CDATA[<p>A year ago, In enrolled in the &ldquo;Postgraduate Studies in Big Data &amp; Analytics in Business and Management&rdquo; at <a href="https://feb.kuleuven.be/permanente-vorming/bigdataanalytics">KU Leuven</a>. And today, the project I&rsquo;ve been working on for the past 3 months came to a conclusion with the final presentation.</p>
<p>The dataset I&rsquo;ve been working on was collected by The Belgian federal police  during 2014-2016 and contains over 52K car crashes. It has been enriched by Informatie Vlaanderen with additional information on weather conditions, road conditions and severity of the accident.</p>
<p>In this project I went through all stages of data cleaning, and I must admit: all rumours you have heard, are true. Data is <strong>not</strong> perfect and complete at all, and it doesn&rsquo;t even make sense at all (Speed limit of 999 km/h, seriously?). Data cleaning does take 80% of your available time.</p>
<p>I&rsquo;ve used random forest (the ensemble variant of decision tree) to predict the severity of the car crash. The performance of this model was not at all accurate, because of the huge imbalance of the severity: over 95 percent of the car crashes only had &ldquo;gewonden&rdquo; (casualties). This is great from a humanity point of view, not so much from a data perspective.</p>
<p>So to tackle this issue, I&rsquo;ve been over- and undersampling the data. The accuracy improved a bit, but still a lot of room for improvement.</p>
<p>After all, I enjoyed the program (even during the late evening classes) and although challenging, the project was fun to work on! The report itself is available on <a href="https://github.com/pieterjd/pg-dissertation/blob/master/report/report.pdf">github</a>.</p>
<p>I also presented my work at different occasions, please check the details [for this specific talk]({% link _talks/carcrash-analysis.md %}).</p>
]]></content></item><item><title>Stream examples Part 3 - Conclusion</title><link>https://www.pieterjd.be/posts/2019-04-08-streams-part3-conclusion/</link><pubDate>Mon, 08 Apr 2019 20:14:53 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-04-08-streams-part3-conclusion/</guid><description>I would like to wrap up with some snippets I use a lot!
Collect to a map When you want to collect to a Map, you need a function for the key and a function for the value.
Suppose you have a list of Person objects with a firstname and last name. If you want to map the firstname to the lastname, you would write something like this:
Map&amp;lt;String, String&amp;gt; firstToLastMap = persons.</description><content type="html"><![CDATA[<p>I would like to wrap up with some snippets I use a lot!</p>
<h1 id="collect-to-a-map">Collect to a map</h1>
<p>When you want to collect to a Map, you need a function for the key and a function for the value.</p>
<p>Suppose you have a list of Person objects with a firstname and last name. If you want to map the firstname to the lastname, you would write something like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">firstToLastMap</span> <span class="o">=</span> <span class="n">persons</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span>
  <span class="n">p</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">.</span><span class="na">getFirstname</span><span class="o">(),</span> <span class="c1">//key mapper function
</span><span class="c1"></span>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">.</span><span class="na">getLastname</span><span class="o">()</span>   <span class="c1">// value mapper function
</span><span class="c1"></span> <span class="o">)</span>
<span class="o">);</span>
</code></pre></div><h1 id="grouping">Grouping</h1>
<p>Suppose you have a List of strings. Per possible length, you want to know which Strings have
this particular length. Then you would group all Strings in the list by their length.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">,</span><span class="s">&#34;two&#34;</span><span class="o">,</span><span class="s">&#34;three&#34;</span><span class="o">,</span><span class="s">&#34;four&#34;</span><span class="o">,</span><span class="s">&#34;five&#34;</span><span class="o">,</span><span class="s">&#34;six&#34;</span><span class="o">);</span>
<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">counts</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
<span class="c1">//output: {3=[one, two, six], 4=[four, five], 5=[three]}
</span></code></pre></div><h1 id="sum-and-average">Sum and Average</h1>
<p>You can also easily do different kinds of count, for instance sum (summingInt) and average (averageInt). In this example, the sum and average of string lengths are computed.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">,</span><span class="s">&#34;two&#34;</span><span class="o">,</span><span class="s">&#34;three&#34;</span><span class="o">,</span><span class="s">&#34;four&#34;</span><span class="o">,</span><span class="s">&#34;five&#34;</span><span class="o">,</span><span class="s">&#34;six&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">summingInt</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())));</span>
<span class="c1">//output: 22
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">averagingInt</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())));</span>
<span class="c1">//output: 3.6666666666666665 -&gt; this equals 22/6
</span></code></pre></div><p>If you want all the statistics (min, max, sum, count, average) in one go, then check out
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#summarizingInt-java.util.function.ToIntFunction-"><code>summarizingInt</code></a></p>
<h1 id="partitioning">Partitioning</h1>
<p>Partioning is also quite easy - in this case you are limited to a bi-partition, based on a predicate that is either <code>true</code> or <code>false</code>. In this example, String with length bigger than 3 are considered long Strings.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">,</span><span class="s">&#34;two&#34;</span><span class="o">,</span><span class="s">&#34;three&#34;</span><span class="o">,</span><span class="s">&#34;four&#34;</span><span class="o">,</span><span class="s">&#34;five&#34;</span><span class="o">,</span><span class="s">&#34;six&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">partitioningBy</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()&gt;</span><span class="n">3</span><span class="o">)));</span>
<span class="c1">//{false=[one, two, six], true=[three, four, five]}
</span><span class="c1"></span>
</code></pre></div>]]></content></item><item><title>Stream examples Part 2 - Reducers</title><link>https://www.pieterjd.be/posts/2019-04-01-streams-part2-reducers/</link><pubDate>Mon, 01 Apr 2019 17:30:53 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-04-01-streams-part2-reducers/</guid><description>Next to collectors, Streams offer reducers as well. You can consider it as building a result, starting from a partial solution and building on top of that. It is actually comparable to how the result is built up when using recursion.
As an example, let&amp;rsquo;s take the sum of all integers starting from 1 up until n. The trivial solution is 0 for the &amp;lsquo;empty case&amp;rsquo;, this is the value before you start looping.</description><content type="html"><![CDATA[<p>Next to collectors, Streams offer reducers as well. You can consider it as building a result, starting from a partial solution and building on top of that. It is actually comparable to how the result is built up when using recursion.</p>
<p>As an example, let&rsquo;s take the sum of all integers starting from 1 up until n. The trivial solution is 0 for the &lsquo;empty case&rsquo;, this is the value before you start looping. This will be the initial value or IdentityValue in stream speak. We move to the next value in the range (1). We combine our intial value and current value by taking the sum. Now we have the sum of all integers 1 up until 1. Now take 2, and add it to the partial solution that we already have, and now we have the partial solution for all integers starting from 1 up until 2.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">)</span>
<span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="n">partial_solution</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">partial_solution</span> <span class="o">+</span> <span class="n">next</span><span class="o">);</span>
</code></pre></div><p>Here we use the <code>reduce</code> method taking 2 arguments: the first one is the value of the &lsquo;empty case&rsquo;, the second is a function taking 2 inputs: the partial solution so far, and the next value of the stream you can use to extend the partial solution.</p>
<p>Off course this reducer is over the top as you can use the <code>sum</code> method on an Integer Stream.</p>
<p>A second example is joining a List of Strings by separating them by a comma.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">commaSeparated</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
<span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="o">(</span><span class="n">partial_solution</span><span class="o">,</span> <span class="n">nextString</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">partial_solution</span> <span class="o">+</span><span class="s">&#34;, &#34;</span> <span class="o">+</span> <span class="n">next</span><span class="o">);</span>
</code></pre></div><p>An alternative is the collector variant:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">commaSeparated</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&#34;,&#34;</span><span class="o">));</span>
</code></pre></div><p>At first, streams can appear difficult to grasp, but once you get the hang of it, you&rsquo;ll really enjoy it!</p>
]]></content></item><item><title>Stream examples Part 1 - Collectors</title><link>https://www.pieterjd.be/posts/2019-03-31-streams-part1-collectors/</link><pubDate>Sun, 31 Mar 2019 12:34:19 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-03-31-streams-part1-collectors/</guid><description>Streams are quite fun - in short: it&amp;rsquo;s a different approach to writing loops. Suppose you have a List of Strings and you want to filter out the String starting with an &amp;rsquo;s' and put them in a new List.
List&amp;lt;String&amp;gt; sStrings = new ArrayList&amp;lt;&amp;gt;(); for(int i = 0; i &amp;lt; strings.size(); i++){ if(strings.get(i).startsWith(&amp;#39;s&amp;#39;)){ //do something with strings starting with s sStrings.add(strings.get(i)); } } Although still readable, there is a lot of redundant code: the for loop itself with the counter and condition, the if statement.</description><content type="html"><![CDATA[<p>Streams are quite fun - in short: it&rsquo;s a different approach to writing loops. Suppose you have a List of Strings and you want to filter out the String starting with an &rsquo;s' and put them in a new List.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">sStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strings</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">startsWith</span><span class="o">(</span><span class="sc">&#39;s&#39;</span><span class="o">)){</span>
      <span class="c1">//do something with strings starting with s
</span><span class="c1"></span>      <span class="n">sStrings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Although still readable, there is a lot of redundant code: the for loop itself with the counter and condition, the if statement. With streams, it looks more readable.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">sStrings</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="sc">&#39;s&#39;</span><span class="o">))</span>
  <span class="n">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre></div><p>Inside the filter method, you have a function - this has the same meaning as in mathematics: you have some inputs, the functions does it magic and something different comes out. In this case, the function takes a String and outputs true when the String starts with an &rsquo;s'.</p>
<p>This filter generates a stream on its own, in this case a stream of Strings all starting with an &rsquo;s'. You can collect the results, in this case a List.</p>
<p>Besides filter you also have map, suppose you want the length of all Strings starting with an &rsquo;s'. You can just add a map after the filter statement. map also takes a function, in this case a String as input, and it outputs a number, the length of the strings. You can string filter and map calls as much as you want. There is a second map, turning an in into an Integer. It is not mandatory as such with <a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">autoboxing</a> available, but it shows you can have as much maps as you want.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stringLengths</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="sc">&#39;s&#39;</span><span class="o">))</span>
  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
  <span class="n">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre></div>]]></content></item><item><title>Version endpoint in Spring Boot</title><link>https://www.pieterjd.be/posts/2019-02-05-version-endpoint-in-spring/</link><pubDate>Tue, 05 Feb 2019 22:48:21 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-02-05-version-endpoint-in-spring/</guid><description>When generating your Spring Boot project using Spring Initializr, you already have the spring-boot-maven-plugin plugin in your Maven pom.xmlfile.
Generating build info is done by adding the build-info goal. This results in a /META-INF/build-info.properties file in your resulting package. By default this contains group id, artifact, buildtime and version of the project.
Off course you can add additional properties in the additionalProperties element. Just like you define properties in any Maven section.</description><content type="html"><![CDATA[<p>When generating your Spring Boot project using <a href="https://start.spring.io/">Spring Initializr</a>, you already have the <code>spring-boot-maven-plugin</code> plugin in your Maven <code>pom.xml</code>file.</p>
<p>Generating build info is done by adding the <code>build-info</code> goal. This results in a <code>/META-INF/build-info.properties</code> file in your resulting package. By default this contains group id, artifact, buildtime and version of the project.</p>
<p>Off course you can add additional properties in the <code>additionalProperties</code> element. Just like you define properties in any Maven section.</p>
<p>Below is the relevant snippet from a Spring Boot application. It contains</p>
<ul>
<li>the <code>spring-boot-maven-plugin</code>definition</li>
<li>the <code>build-info</code>goal</li>
<li>additional properties such as application name and application description. You can add as many as you like</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;build&gt;</span>
   <span class="nt">&lt;plugins&gt;</span>
      <span class="nt">&lt;plugin&gt;</span>
         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
         <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
         <span class="nt">&lt;executions&gt;</span>
            <span class="nt">&lt;execution&gt;</span>
               <span class="nt">&lt;goals&gt;</span>
                  <span class="nt">&lt;goal&gt;</span>build-info<span class="nt">&lt;/goal&gt;</span>
               <span class="nt">&lt;/goals&gt;</span>
               <span class="nt">&lt;configuration&gt;</span>
                  <span class="nt">&lt;additionalProperties&gt;</span>
                     <span class="nt">&lt;java.source&gt;</span>${maven.compiler.source}<span class="nt">&lt;/java.source&gt;</span>
                     <span class="nt">&lt;java.version&gt;</span>${java.version}<span class="nt">&lt;/java.version&gt;</span>
                     <span class="nt">&lt;application.name&gt;</span>${project.name}<span class="nt">&lt;/application.name&gt;</span>
                     <span class="nt">&lt;application.description&gt;</span>${project.description}<span class="nt">&lt;/application.description&gt;</span>
                  <span class="nt">&lt;/additionalProperties&gt;</span>
               <span class="nt">&lt;/configuration&gt;</span>
            <span class="nt">&lt;/execution&gt;</span>
         <span class="nt">&lt;/executions&gt;</span>
      <span class="nt">&lt;/plugin&gt;</span>
   <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div><p>Next part is to read this properties file. Thank god for <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/info/BuildProperties.html"><code>BuildProperties</code></a> . Spring Boot also creates a Bean when starting an application, so you can just auto wire it to a field.</p>
<p>Only downside is that this class is not related to the default <code>java.util.Properties</code>class. So you have to create an intermediate <code>Properties</code>object and copy all (key,value) pairs from the buildProperties to the property object you want to return. This is required as the <code>BuildProperties</code>class does not define getters for custom properties</p>
<p>The <code>time</code>property had to be transformed to a String as the default <code>Instant</code>does not map properly to json.</p>
<p>If you put all things together, you get the following controller.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/version&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuildInfoController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">BuildProperties</span> <span class="n">buildProperties</span><span class="o">;</span>

    <span class="nd">@GetMapping</span>
    <span class="kd">public</span> <span class="n">Properties</span> <span class="nf">getInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
        <span class="c1">//need to explicitly loop over all entries, just returning the BuildProperties object only contains the specific fields (artificact, group, name, time and version)
</span><span class="c1"></span>        <span class="n">buildProperties</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">prop</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
        <span class="c1">//proper date formatting for time
</span><span class="c1"></span>        <span class="n">prop</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;time&#34;</span><span class="o">,</span> <span class="n">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">prop</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;time&#34;</span><span class="o">))).</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">prop</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Now you can run the application and do a request for <code>localhost:8080/version</code>, and this results in the following json:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>  
   <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;ta&#34;</span><span class="p">,</span>
   <span class="nt">&#34;java.version&#34;</span><span class="p">:</span><span class="s2">&#34;1.8&#34;</span><span class="p">,</span>
   <span class="nt">&#34;time&#34;</span><span class="p">:</span><span class="s2">&#34;2019-02-05T13:13:48.282Z&#34;</span><span class="p">,</span>
   <span class="nt">&#34;application.description&#34;</span><span class="p">:</span><span class="s2">&#34;Demo project for Spring Boot&#34;</span><span class="p">,</span>
   <span class="nt">&#34;application.name&#34;</span><span class="p">:</span><span class="s2">&#34;ta&#34;</span><span class="p">,</span>
   <span class="nt">&#34;version&#34;</span><span class="p">:</span><span class="s2">&#34;0.0.1-SNAPSHOT&#34;</span><span class="p">,</span>
   <span class="nt">&#34;java.source&#34;</span><span class="p">:</span><span class="s2">&#34;1.8&#34;</span><span class="p">,</span>
   <span class="nt">&#34;group&#34;</span><span class="p">:</span><span class="s2">&#34;com.example.edev.ott&#34;</span><span class="p">,</span>
   <span class="nt">&#34;artifact&#34;</span><span class="p">:</span><span class="s2">&#34;ta&#34;</span>
<span class="p">}</span>
</code></pre></div><h2 id="summary">Summary</h2>
<p>To conclude: only two steps required for a version endpoint:</p>
<ol>
<li>configure Maven and add your custom properties if required</li>
<li>create a RestController, auto-wire BuildProperties and transform it to <code>java.util.properties</code> , <code>Map</code> or whatever you want</li>
</ol>
]]></content></item><item><title>Font Awesome with JHipster</title><link>https://www.pieterjd.be/posts/2019-01-21-font-awesome-with-jhipster/</link><pubDate>Mon, 21 Jan 2019 19:24:21 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-01-21-font-awesome-with-jhipster/</guid><description>Font Awesome offers vector icons and social logos. As it is one of the most popular icon sets, it is included with JHipster.
Out of the box, only some icons are available for your angular front-end. And it&amp;rsquo;s a bit tricky to find out how these icons are loaded as all Angular components use the fa-icon directive, available in JHipster.
In this particular use-case, I need to add the shopping basket icon.</description><content type="html"><![CDATA[<p><a href="https://fontawesome.com/">Font Awesome</a> offers vector icons and social logos. As it is one of the most popular icon sets, it is included with JHipster.</p>
<p>Out of the box, only some icons are available for your angular front-end. And it&rsquo;s a bit tricky to find out how these icons are loaded as all Angular components use the <code>fa-icon</code> directive, available in JHipster.</p>
<p>In this particular use-case, I need to add the shopping basket icon. After some searching around, I found out all <del>Font</del> <a href="https://fortawesome.com/">Fort Awesome</a> icons are loaded in <code>src/main/webapp/app/vendor.ts</code>. So you just load in the icon of your choice:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">import</span> <span class="p">{</span>
    <span class="nx">faUser</span><span class="p">,</span>
    <span class="nx">faSort</span><span class="p">,</span>
    <span class="c1">//snip
</span><span class="c1"></span>    <span class="nx">faShoppingBasket</span>
<span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@fortawesome/free-solid-svg-icons&#39;</span><span class="p">;</span>
<span class="c1">//snip
</span><span class="c1"></span><span class="nx">library</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">faShoppingBasket</span><span class="p">);</span>
</code></pre></div><p>Finally in your component&rsquo;s template, you can include the icon with <code>&lt;fa-icon icon=&quot;shopping-basket&quot;&gt;&lt;/fa-icon&gt;</code>.</p>
]]></content></item><item><title>I18N with JHipster</title><link>https://www.pieterjd.be/posts/2019-01-15-i18n-with-jhipster/</link><pubDate>Tue, 15 Jan 2019 19:24:21 +0000</pubDate><guid>https://www.pieterjd.be/posts/2019-01-15-i18n-with-jhipster/</guid><description>I myself am a huge fan of generators - it saves a lot of time. That&amp;rsquo;s why I love JHipster. JHipster not only uses my favourite frameworks such as Spring Boot and Angular, but it provides you with useful features out-of-the-box.
One of the questions of the wizard guiding you through the generation of your application, is which languages you want to support. For every selected language, all possible labels are generated.</description><content type="html"><![CDATA[<p>I myself am a huge fan of generators - it saves a lot of time. That&rsquo;s why I love <a href="http://http://jhipster.tech">JHipster</a>. JHipster not only uses my favourite frameworks such as Spring Boot and Angular, but it provides you with useful features out-of-the-box.</p>
<p>One of the questions of the wizard guiding you through the generation of your application, is which languages you want to support. For every selected language, all possible labels are generated.</p>
<p>But what about <em>your</em> labels in <em>your</em> custom developed component? Let&rsquo;s have a look.</p>
<p>First you need the actual translations. They are located in <code>src/main/webapp/i18n</code>. For each language you selected in the wizard, there is a subfolder named according to a <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO standard</a>: English translations are stored in the <code>en</code>folder, Dutch in <code>nl</code>, &hellip;</p>
<p>These folder contain json files - one for each JHipster entity, and some utility files (login screen, settings, error messages, &hellip;). Next are the labels for error messages in Dutch:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;Foutpagina!&#34;</span><span class="p">,</span>
        <span class="nt">&#34;http&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;400&#34;</span><span class="p">:</span> <span class="s2">&#34;Bad request.&#34;</span><span class="p">,</span>
            <span class="nt">&#34;403&#34;</span><span class="p">:</span> <span class="s2">&#34;U bent niet bevoegd om de pagina te openen.&#34;</span><span class="p">,</span>
            <span class="nt">&#34;405&#34;</span><span class="p">:</span> <span class="s2">&#34;The HTTP verb you used is not supported for this URL.&#34;</span><span class="p">,</span>
            <span class="nt">&#34;500&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal server error.&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;concurrencyFailure&#34;</span><span class="p">:</span> <span class="s2">&#34;Another user modified this data at the same time as you. Your changes were rejected.&#34;</span><span class="p">,</span>
        <span class="nt">&#34;validation&#34;</span><span class="p">:</span> <span class="s2">&#34;Validation error on the server.&#34;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>So if you want to display the message for an unauthorized access, you use the label <code>error.http.403</code>.</p>
<p>But how do you actually display the translated message in your angular component? With a directive off course, courtesy of JHipster. In the next snippet only the relevant parts remain (so no <code>[hidden]</code> to only display in case of a 403 error)</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;alert alert-danger&#34;</span> <span class="na">jhiTranslate</span><span class="o">=</span><span class="s">&#34;error.http.403&#34;</span><span class="p">&gt;</span>You are not authorized to access this page.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><p>So you use the <code>jhiTranslate</code> directive, assign it the label key, as you defined it in the huge json object in the translation file. The actual value of the div is the fallback message in case no translation is available.</p>
<p>Final question to answer: how do I configure to include my custom translation files? You don&rsquo;t :) Just check <code>webpack/webpack.common.js</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">new</span> <span class="nx">MergeJsonWebpackPlugin</span><span class="p">({</span>
            <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">groupBy</span><span class="o">:</span> <span class="p">[</span>
                    <span class="p">{</span> <span class="nx">pattern</span><span class="o">:</span> <span class="s2">&#34;./src/main/webapp/i18n/nl/*.json&#34;</span><span class="p">,</span> <span class="nx">fileName</span><span class="o">:</span> <span class="s2">&#34;./i18n/nl.json&#34;</span> <span class="p">}</span>
                    <span class="c1">// jhipster-needle-i18n-language-webpack - JHipster will add/remove languages in this array
</span><span class="c1"></span>                <span class="p">]</span>
            <span class="p">}</span>
        <span class="p">})</span>
</code></pre></div><p>It contains a <code>MergeJsonWebpackPlugin</code>, you supply it with a pattern of the files to merge and an output file. And this particular pattern is in case of Dutch <code>./src/main/webapp/i18n/nl/*.json</code>. So it includes <strong>all</strong> json files in the directory. And that&rsquo;s why your new, custom translation is automatically available after a rebuild.</p>
<p>Now go <a href="http://translate.google.com">translate</a> 🙂.</p>
]]></content></item></channel></rss>