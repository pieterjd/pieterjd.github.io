<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Automation on pieterjd.be</title><link>https://www.pieterjd.be/tags/automation/</link><description>Recent content in Automation on pieterjd.be</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 17 Apr 2021 19:33:17 +0200</lastBuildDate><atom:link href="https://www.pieterjd.be/tags/automation/index.xml" rel="self" type="application/rss+xml"/><item><title>Templating as Automation</title><link>https://www.pieterjd.be/posts/templating/</link><pubDate>Sat, 17 Apr 2021 19:33:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/templating/</guid><description>Templating is a powerful tool to save time on tedious tasks!</description></item><item><title>Automate AEM development</title><link>https://www.pieterjd.be/posts/automate-aem-development/</link><pubDate>Mon, 08 Feb 2021 19:31:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/automate-aem-development/</guid><description>When working with AEM, you&amp;rsquo;re confronted with tedious work - writing components with dialogs defined in XML, lots of boiler-plating. Ideal for automation!
Enter your favorite code generator Yeoman, &amp;ldquo;the Web&amp;rsquo;s Scaffolding ToolFor Modern Webapps&amp;rdquo; is great for this purpose. I came to know this when working on some JHipster project.
It&amp;rsquo;s very easy to define generator (eg. generate an AEM component) using templates (renderscript, dialog, &amp;hellip;.)
I&amp;rsquo;ve put things together in the AEM Generator Repo.</description></item><item><title>Automate Angular Material Workflow using Schematics</title><link>https://www.pieterjd.be/posts/automate-angular-material-workflow-with-schematics/</link><pubDate>Sat, 02 Jan 2021 12:22:00 +0200</pubDate><guid>https://www.pieterjd.be/posts/automate-angular-material-workflow-with-schematics/</guid><description>What is this post about? I&amp;rsquo;m a huge fan of the SpringBoot backend - Angular frontend combination. And since my UX/UI skills are very limited, I really enjoy working with angular material, a really nice library of common widgets implemented as Angular components using the material design.
I found myself doing the same thing over and over again:
generate a table component, using the material table schematic create a service with Angular CLI connecting to a SpringBoot backend to retrieve objects, using the typical CRUD methods (getAll, save, delete, &amp;hellip;) create an interface matching the json obtained from the backend Then I suddenly realized:</description></item><item><title>Automate Timesheeting</title><link>https://www.pieterjd.be/posts/automate-timesheeting/</link><pubDate>Sun, 13 Dec 2020 20:54:17 +0200</pubDate><guid>https://www.pieterjd.be/posts/automate-timesheeting/</guid><description>Automating timesheeting and save yourself a lot of headaches:)</description></item></channel></rss>